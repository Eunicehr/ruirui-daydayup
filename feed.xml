<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://eunicehr.github.io//ruirui-daydayup/feed.xml" rel="self" type="application/atom+xml" /><link href="https://eunicehr.github.io//ruirui-daydayup/" rel="alternate" type="text/html" /><updated>2022-01-28T12:28:02+00:00</updated><id>https://eunicehr.github.io//ruirui-daydayup/feed.xml</id><title type="html">guanguang</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>ruirui-daydayup</name></author><entry><title type="html">leetcode每日一题</title><link href="https://eunicehr.github.io//ruirui-daydayup/python/2022/01/28/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98.html" rel="alternate" type="text/html" title="leetcode每日一题" /><published>2022-01-28T00:00:00+00:00</published><updated>2022-01-28T00:00:00+00:00</updated><id>https://eunicehr.github.io//ruirui-daydayup/python/2022/01/28/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98</id><content type="html" xml:base="https://eunicehr.github.io//ruirui-daydayup/python/2022/01/28/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98.html"><![CDATA[<h1 id="leetcode每日一题">leetcode每日一题</h1>

<h2 id="111">1.11</h2>

<h3 id="两数之和">两数之和</h3>

<ul>
  <li>
    <p>题目</p>

    <p><img src="https://s2.loli.net/2022/01/12/lTESyCzU9owi8nm.png" alt="image-20220112172016990" /></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span> <span class="p">:</span>
                    <span class="k">return</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>注意点：</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">Tab</code>向右缩进，<code class="language-plaintext highlighter-rouge">shift+Tab</code>向左缩进</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#python3的格式
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        
<span class="c1">#python2的格式
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="112">1.12</h2>

<h3 id="回文数">回文数</h3>

<ul>
  <li>
    <p>题目</p>

    <p><img src="https://s2.loli.net/2022/01/12/HDlO273mpx6BTsG.png" alt="image-20220112163355680" /></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isPalindrome</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">a</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">!=</span><span class="mi">0</span><span class="p">:</span>
            <span class="n">b</span><span class="o">=</span><span class="n">a</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>注意点：python 中[:-1]和[::-1]的区别：</p>

    <ul>
      <li>
        <p>[::-1] 顺序相反操作，[:-1] 读取倒数第一个元素</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="o">=</span><span class="s">'python'</span>
<span class="n">b</span><span class="o">=</span><span class="n">a</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="c1">#nohtyp
</span>     
<span class="n">c</span><span class="o">=</span><span class="n">a</span><span class="p">[::</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="c1">#nhy
</span>     
<span class="n">d</span><span class="o">=</span><span class="n">a</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>  <span class="c1">#从位置0到位置-1之前的数
</span><span class="k">print</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>  <span class="c1">#pytho
</span>     
<span class="n">e</span><span class="o">=</span><span class="n">a</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>  <span class="c1">#从位置0到位置-2之前的数
</span>     
<span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>  <span class="c1">#pyth
</span></code></pre></div>        </div>
      </li>
      <li>
        <p>[::-2]表示从最后一个元素以步长为二向前读取元素</p>

        <p>[1:4:2]表示从第一个元素以步长为二向后读取到第三个元素</p>
      </li>
    </ul>
  </li>
</ul>

<p>##1.13</p>

<h3 id="至少是其他数字两倍的最大数">至少是其他数字两倍的最大数</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/13/KEFqUQWuygliCXp.png" alt="image-20220113103540152" /></p>

<p>思路：先用max函数找到列表中的最大值，然后遍历列表，记录下最大值的索引，当列表中的数字不满足条件时，直接返回-1</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">dominantIndex</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span><span class="nb">int</span><span class="p">:</span>
        <span class="n">flag</span><span class="o">=-</span><span class="mi">1</span>
        <span class="n">m</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">m</span><span class="p">:</span>
                <span class="n">flag</span><span class="o">=</span><span class="n">i</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!=</span><span class="n">m</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="o">&gt;</span><span class="n">m</span><span class="p">:</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">flag</span>
</code></pre></div></div>

<h3 id="二叉树的中序遍历">二叉树的中序遍历</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/13/TnKi3kcDYWjrp2H.png" alt="image-20220113191944604" /></p>

<p><img src="https://s2.loli.net/2022/01/13/pXVrQgP458ecjIO.png" alt="image-20220113192014463" /></p>

<p><img src="https://s2.loli.net/2022/01/13/DBhV6CqNE9KULTY.png" alt="image-20220113192036674" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">inorderTraversal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">root</span><span class="o">==</span><span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">inorderTraversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">inorderTraversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">inorderTraversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span><span class="o">+</span><span class="p">[</span><span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">]</span><span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">inorderTraversal</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="二叉树的最大深度">二叉树的最大深度</h3>

<p>题目:</p>

<p><img src="https://s2.loli.net/2022/01/13/C9AloJ6SWUINXVr.png" alt="image-20220113191849497" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
</span><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxDepth</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TreeNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">root</span><span class="o">==</span><span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">l</span><span class="o">=</span><span class="mi">1</span><span class="o">+</span><span class="bp">self</span><span class="p">.</span><span class="n">maxDepth</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
            <span class="n">r</span><span class="o">=</span><span class="mi">1</span><span class="o">+</span><span class="bp">self</span><span class="p">.</span><span class="n">maxDepth</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="最大共同前缀">最大共同前缀</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/13/i9Pq8TfUVhANzmC.png" alt="image-20220113215011583" /></p>

<ul>
  <li>方法一:横向扫描</li>
</ul>

<p><img src="https://s2.loli.net/2022/01/14/8vcGgMJjQftoeDq.png" alt="image-20220114001206621" /></p>

<p>思路：如果字符串列表为空，返回”“；将第一个字符串和第二个字符串求共同前缀，然后再将之前求到的共同前缀和第三个字符串求共同前缀,如此反复直到最后一个。第一个字符串的第一个字符如果和第二个字符串的第一个字符相同，就将第一个字符记作共同前缀，第二个字符如果仍相同，则将第二个字符也记录进之前求得的共同前缀中，直到出现不同的字符。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">:</span><span class="nb">str</span><span class="p">,</span><span class="n">b</span><span class="p">:</span><span class="nb">str</span><span class="p">)</span><span class="o">-&gt;</span><span class="nb">str</span><span class="p">:</span>
    <span class="s">"返回两个字符串的最长前缀"</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">&gt;</span><span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
        <span class="n">n</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">n</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">x</span><span class="o">=</span><span class="s">''</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">break</span>
    <span class="k">return</span> <span class="n">x</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestCommonPrefix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">strs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">strs</span><span class="o">==</span><span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">''</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">strs</span><span class="p">)</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        	<span class="n">x</span><span class="o">=</span><span class="n">f</span><span class="p">(</span><span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">strs</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="c1">#将第一个字符串和第二个字符串求共同前缀
</span>		<span class="c1">#将之前求到的共同前缀和第三个字符串求共同前缀,如此反复直到最后一个
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">strs</span><span class="p">)):</span>
            <span class="n">x</span><span class="o">=</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">strs</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">x</span>
            
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestCommonPrefix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">strs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">strs</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">""</span>
        
        <span class="n">prefix</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">len</span><span class="p">(</span><span class="n">strs</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
            <span class="n">prefix</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">lcp</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">strs</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">prefix</span><span class="p">:</span>
                <span class="k">break</span>
        
        <span class="k">return</span> <span class="n">prefix</span>

    <span class="k">def</span> <span class="nf">lcp</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">str1</span><span class="p">,</span> <span class="n">str2</span><span class="p">):</span>
        <span class="n">length</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">str1</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">str2</span><span class="p">)),</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="ow">and</span> <span class="n">str1</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">==</span> <span class="n">str2</span><span class="p">[</span><span class="n">index</span><span class="p">]:</span>
            <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">str1</span><span class="p">[:</span><span class="n">index</span><span class="p">]</span>
</code></pre></div></div>

<p>时间复杂度：O(mn)，其中 mm 是字符串数组中的字符串的平均长度，nn 是字符串的数量。最坏情况下，字符串数组中的每个字符串的每个字符都会被比较一次。</p>

<p>空间复杂度：O(1)。使用的额外空间复杂度为常数。</p>

<ul>
  <li>
    <p>方法二：纵向扫描</p>

    <p>思路：纵向扫描时，从前往后遍历所有字符串的每一列，比较相同列上的字符是否相同，如果相同则继续对下一列进行比较，如果不相同则当前列不再属于公共前缀，当前列之前的部分为最长公共前缀。</p>

    <p><img src="https://s2.loli.net/2022/01/13/Dn6gPEiC1qdhMm4.png" alt="image-20220113235647418" /></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestCommonPrefix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">strs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">strs</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">""</span>
          
        <span class="n">length</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">len</span><span class="p">(</span><span class="n">strs</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span><span class="p">):</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="nb">any</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">strs</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="ow">or</span> <span class="n">strs</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">c</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">count</span><span class="p">)):</span>
                <span class="k">return</span> <span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">][:</span><span class="n">i</span><span class="p">]</span>
          
        <span class="k">return</span> <span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div>    </div>

    <p>时间复杂度：O(mn)，其中 m 是字符串数组中的字符串的平均长度，nn是字符串的数量。最坏情况下，字符串数组中的每个字符串的每个字符都会被比较一次。</p>

    <p>空间复杂度：O(1)。使用的额外空间复杂度为常数。</p>
  </li>
</ul>

<h2 id="114">1.14</h2>

<h3 id="罗马数字转整数">罗马数字转整数</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/14/4fX6UMSbzRsiQ1h.png" alt="image-20220114181556038" /></p>

<p><img src="https://s2.loli.net/2022/01/14/zCT81aIol7QOF3h.png" alt="image-20220114181616397" /></p>

<p><img src="https://s2.loli.net/2022/01/14/tbKdEITwFNrxGuQ.png" alt="image-20220114181639685" /></p>

<p>思路：如果当前的字符小于它后面的字符，就把这两个字符看作一个整体，值为后面的那个字符减去前面那个字符。如果当前的字符大于它后面的字符，值为每一位的字符的值相加</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">romanToInt</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">val</span><span class="o">=</span><span class="p">{</span>
            <span class="s">"I"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
            <span class="s">"V"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span>
            <span class="s">"X"</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span>
            <span class="s">"L"</span><span class="p">:</span><span class="mi">50</span><span class="p">,</span>
            <span class="s">"C"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span>
            <span class="s">"D"</span><span class="p">:</span><span class="mi">500</span><span class="p">,</span>
            <span class="s">"M"</span><span class="p">:</span><span class="mi">1000</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="n">t</span><span class="o">=</span><span class="mi">0</span>
        <span class="n">i</span><span class="o">=</span><span class="mi">0</span> <span class="c1">##当前看的是第几位罗马数字
</span>        <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
            <span class="k">if</span>  <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">and</span> <span class="n">val</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">&lt;</span><span class="n">val</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]]:</span>
                <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="o">+</span><span class="n">val</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]]</span><span class="o">-</span><span class="n">val</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
                <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="o">+</span><span class="n">val</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
                <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">t</span>
</code></pre></div></div>

<p>注意点：i+1&lt;len(s)</p>

<h3 id="有效的括号">有效的括号</h3>

<p>题目:</p>

<p><img src="https://s2.loli.net/2022/01/14/cvUfsYWySowthAM.png" alt="image-20220114091411965" /></p>

<p><img src="https://s2.loli.net/2022/01/14/2IFhN3Ggd7p8BXP.png" alt="image-20220114091518735" /></p>

<p>思路：如果是左括号，则将其压入栈；如果是右括号，则将左括号出栈，判断出栈的左括号能否与右括号匹配。最后判断栈是否被清空</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isValid</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">stack</span><span class="o">=</span><span class="p">[]</span>
        <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">char</span> <span class="ow">in</span> <span class="p">{</span><span class="s">"("</span><span class="p">,</span><span class="s">"["</span><span class="p">,</span><span class="s">"{"</span><span class="p">}:</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">stack</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="n">x</span><span class="o">=</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">char</span><span class="o">==</span><span class="s">")"</span> <span class="ow">and</span> <span class="n">x</span><span class="o">!=</span><span class="s">"("</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="k">if</span> <span class="n">char</span><span class="o">==</span><span class="s">"]"</span> <span class="ow">and</span> <span class="n">x</span><span class="o">!=</span><span class="s">"["</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="k">if</span> <span class="n">char</span><span class="o">==</span><span class="s">"}"</span> <span class="ow">and</span> <span class="n">x</span><span class="o">!=</span><span class="s">"{"</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span>
          
</code></pre></div></div>

<p>注意点：空列表不等于None</p>

<h2 id="115">1.15</h2>

<h3 id="实现strstr">实现strStr()</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/15/Bq2NXxk8gRolZd1.png" alt="image-20220115075333231" /></p>

<p><img src="https://s2.loli.net/2022/01/15/c8Z2mpBM3AN9tya.png" alt="image-20220115075357719" /></p>

<p>思路：</p>

<p>直接在haystack中找needle</p>

<pre><code class="language-pyhton">class Solution:
    def strStr(self, haystack: str, needle: str) -&gt; int:
        for i in range (len(haystack)-len(needle)+1):
            if haystack[i:i+len(needle)]==needle:
                return i
        return -1

</code></pre>

<h3 id="加一">加一</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/15/1xDydMSY9NjH4Ve.png" alt="image-20220115090440242" /></p>

<p><img src="https://s2.loli.net/2022/01/15/5LQNoJaMFWXYVkE.png" alt="image-20220115090501054" /></p>

<p>思路：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">plusOne</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">digits</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">digits</span><span class="p">))):</span>
            <span class="k">if</span> <span class="n">digits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">9</span><span class="p">:</span>
                <span class="n">digits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">digits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">digits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span>
                <span class="k">return</span> <span class="n">digits</span>
        <span class="n">digits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
        <span class="n">digits</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">digits</span>
</code></pre></div></div>

<p>注意点:1. 最后三句在for循环里面！！！</p>

<p>​            2.学会断点调试</p>

<h3 id="杨辉三角">杨辉三角</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/15/PiatvZTF8lcbXYm.png" alt="image-20220115112752634" /></p>

<p><img src="https://s2.loli.net/2022/01/15/GvOUIr5ADQjNeht.png" alt="image-20220115112826648" /></p>

<p>思路：每一行的第一个和最后一个元素是1，其他位置等于上一行前一列的元素与上一行同列的元素相加</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">generate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">numRows</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">result</span><span class="o">=</span><span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numRows</span><span class="p">):</span>
            <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">([])</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">j</span> <span class="ow">in</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">):</span>
                    <span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">result</span>
</code></pre></div></div>

<h2 id="116">1.16</h2>

<h3 id="最后一个单词的长度">最后一个单词的长度</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/16/wobuPA1kUlFINVC.png" alt="image-20220116145505021" /></p>

<p><img src="https://s2.loli.net/2022/01/16/ChZFVdR3EL4fJem.png" alt="image-20220116145536795" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">lengthOfLastWord</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">p</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="n">length</span><span class="o">=</span><span class="mi">0</span>
        <span class="k">while</span> <span class="n">p</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
            <span class="n">p</span><span class="o">=</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">p</span><span class="p">]</span><span class="o">!=</span><span class="s">" "</span><span class="p">:</span>
                <span class="n">length</span><span class="o">=</span><span class="n">length</span><span class="o">+</span><span class="mi">1</span>
            <span class="k">elif</span> <span class="n">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">length</span>
        <span class="k">return</span> <span class="n">length</span>
</code></pre></div></div>

<h3 id="七进制数">七进制数</h3>

<p>题目:</p>

<p><img src="https://s2.loli.net/2022/01/16/LHX5j2qm6ibNsK1.png" alt="image-20220116151733706" /></p>

<p>思路：分十进制数大于零，等于0，小于0三种情况</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">convertToBase7</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">num</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span><span class="s">"0"</span>
        <span class="n">old_num</span><span class="o">=</span><span class="n">num</span>
        <span class="n">num</span><span class="o">=</span><span class="nb">abs</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
        <span class="n">res</span><span class="o">=</span><span class="s">""</span>
        <span class="k">while</span> <span class="n">num</span><span class="o">!=</span><span class="mi">0</span><span class="p">:</span>
            <span class="n">temp</span><span class="o">=</span><span class="n">num</span><span class="o">%</span><span class="mi">7</span>
            <span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="o">//</span><span class="mi">7</span>
            <span class="n">res</span><span class="o">=</span><span class="n">res</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">old_num</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">"-"</span><span class="o">+</span><span class="n">res</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> 
        <span class="k">return</span> <span class="n">res</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> 
</code></pre></div></div>

<h3 id="买卖股票的最佳时机">买卖股票的最佳时机</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/16/8CpsBLowJkfxjhi.png" alt="image-20220116163548078" /></p>

<p>思路：将初始最大利润设为0，最低买入价格设为无限大。将数组中读取的价格和初始最低买入价格比较，取最小的；更新的利润；更新最大利润。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxProfit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">prices</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">max_profit</span><span class="o">=</span><span class="mi">0</span>
        <span class="n">min_price</span><span class="o">=</span><span class="nb">float</span><span class="p">(</span><span class="s">'inf'</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">prices</span><span class="p">:</span>
            <span class="n">min_price</span><span class="o">=</span><span class="nb">min</span><span class="p">(</span><span class="n">min_price</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
            <span class="n">update_profit</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="n">min_price</span>
            <span class="n">max_profit</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">max_profit</span><span class="p">,</span><span class="n">update_profit</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">max_profit</span>
</code></pre></div></div>

<h2 id="117">1.17</h2>

<h3 id="2的幂">2的幂</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/17/k1wSNaQ2lY8GE6n.png" alt="image-20220117170551487" /></p>

<p><img src="https://s2.loli.net/2022/01/17/XKJOgp6lRFr5tLW.png" alt="image-20220117170618265" /></p>

<p>思路：如果一个数不断除以2，最后剩下的余数为1，则该数为2的幂</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isPowerOfTwo</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">n</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">while</span> <span class="n">n</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span>
        <span class="k">if</span> <span class="n">n</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<h3 id="删除链表中的结点">删除链表中的结点</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/17/KnPS3j5Gouixrb2.png" alt="image-20220117171058678" /></p>

<p><img src="https://s2.loli.net/2022/01/17/LfgFPbcREA8xCSZ.png" alt="image-20220117171132823" /></p>

<p><img src="https://s2.loli.net/2022/01/17/u9vJaN71qzDnYoA.png" alt="image-20220117171206417" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">deleteNode</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
        <span class="s">"""
        :type node: ListNode
        :rtype: void Do not return anything, modify node in-place instead.
        """</span>
        <span class="k">if</span> <span class="n">node</span> <span class="ow">and</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span>
            <span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="o">=</span><span class="n">node</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span>
            <span class="n">node</span><span class="p">.</span><span class="nb">next</span><span class="o">=</span><span class="n">node</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<h3 id="有效的完全平方数">有效的完全平方数</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/17/4ERZTN8VjmalvrK.png" alt="image-20220117170933045" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isPerfectSquare</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">num</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">left</span><span class="p">,</span><span class="n">right</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">num</span>
        <span class="k">while</span> <span class="n">left</span><span class="o">&lt;=</span><span class="n">right</span><span class="p">:</span>
            <span class="n">mid</span><span class="o">=</span><span class="n">left</span><span class="o">+</span><span class="p">(</span><span class="n">right</span><span class="o">-</span><span class="n">left</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
            <span class="k">if</span> <span class="n">mid</span><span class="o">&gt;</span><span class="n">num</span><span class="o">/</span><span class="n">mid</span><span class="p">:</span>
                <span class="n">right</span><span class="o">=</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span>
            <span class="k">elif</span> <span class="n">mid</span><span class="o">==</span><span class="n">num</span><span class="o">/</span><span class="n">mid</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">left</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">left</span><span class="o">==</span><span class="n">num</span><span class="o">//</span><span class="n">left</span> <span class="ow">and</span> <span class="n">num</span><span class="o">%</span><span class="n">left</span><span class="o">==</span><span class="mi">0</span>
</code></pre></div></div>

<h3 id="斐波那契数">斐波那契数</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/17/B3mCXRiQfvNx2TS.png" alt="image-20220117170711105" /></p>

<p><img src="https://s2.loli.net/2022/01/17/YUV92KQhRdBHclW.png" alt="image-20220117170805731" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">n</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">n</span>
        <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="o">+</span><span class="n">y</span>
        <span class="k">return</span> <span class="n">y</span>
             
</code></pre></div></div>

<p>注意点：是x,y=y,x+y</p>

<p>​               而不是x=y</p>

<p>​                          y=x+y</p>

<p>​              结果不一样</p>

<h2 id="118">1.18</h2>

<h3 id="删除有序数组中的重复项">删除有序数组中的重复项</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/18/SfXlhsc3UIB6D8e.png" alt="image-20220118171535803" /></p>

<p><img src="https://s2.loli.net/2022/01/18/AwqLzaREFvcCWey.png" alt="image-20220118171608357" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeDuplicates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        <span class="n">count</span><span class="o">=</span><span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">count</span><span class="p">]</span><span class="o">!=</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">count</span><span class="o">=</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">count</span><span class="p">]</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">count</span><span class="o">+</span><span class="mi">1</span>
</code></pre></div></div>

<h3 id="搜索插入位置">搜索插入位置</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/18/vVdiINQ2MhekuBb.png" alt="image-20220118171743440" /></p>

<p><img src="https://s2.loli.net/2022/01/18/SP9OX6EWmgpnhFf.png" alt="image-20220118171801230" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">searchInsert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">target</span><span class="o">&gt;</span><span class="n">nums</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">target</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">i</span>
</code></pre></div></div>

<h3 id="二进制求和">二进制求和</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/18/3RbKGtC2fPVzplx.png" alt="image-20220118171931577" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">addBinary</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">result</span><span class="p">,</span><span class="n">carry</span><span class="p">,</span><span class="n">val</span><span class="o">=</span><span class="s">""</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">),</span><span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">))):</span>
            <span class="n">val</span> <span class="o">=</span><span class="n">carry</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
                <span class="n">val</span><span class="o">=</span><span class="n">val</span><span class="o">+</span><span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="o">-</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)])</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
                <span class="n">val</span><span class="o">=</span><span class="n">val</span><span class="o">+</span><span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="o">-</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)])</span>
            <span class="n">carry</span><span class="p">,</span><span class="n">val</span><span class="o">=</span><span class="n">val</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span><span class="n">val</span><span class="o">%</span><span class="mi">2</span>
            <span class="n">result</span><span class="o">=</span><span class="n">result</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">carry</span><span class="p">:</span>
            <span class="n">result</span><span class="o">=</span><span class="n">result</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="环形链表">环形链表</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/18/958hx7qKOWUJLgN.png" alt="image-20220118172109269" /></p>

<p><img src="https://s2.loli.net/2022/01/18/ry2fTa43NlvWCqP.png" alt="image-20220118172216099" /></p>

<p>思路:设置一个快指针和一个慢指针，若二者可以重合，说明是环形链表</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">hasCycle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">fast</span><span class="p">,</span><span class="n">slow</span><span class="o">=</span><span class="n">head</span><span class="p">,</span><span class="n">head</span>
        <span class="k">while</span> <span class="n">fast</span> <span class="ow">and</span> <span class="n">fast</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span>
            <span class="n">fast</span><span class="p">,</span><span class="n">slow</span><span class="o">=</span><span class="n">fast</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">,</span><span class="n">slow</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">if</span> <span class="n">fast</span><span class="o">==</span><span class="n">slow</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<h3 id="分发饼干">分发饼干</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/18/N1Fy429uHaSl8Rd.png" alt="image-20220118172336074" /></p>

<p><img src="https://s2.loli.net/2022/01/18/79vKXAQwfh83tVa.png" alt="image-20220118172401810" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findContentChildren</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">g</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">s</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">g</span><span class="o">=</span><span class="nb">sorted</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
        <span class="n">s</span><span class="o">=</span><span class="nb">sorted</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="n">count</span><span class="o">=</span><span class="mi">0</span>
        <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">g</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                <span class="n">count</span><span class="o">=</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span>
                <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span>
            <span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">count</span>
</code></pre></div></div>

<h2 id="119">1.19</h2>

<h3 id="岛屿的周长">岛屿的周长</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/19/BlzEqJ2CfoXAr3y.png" alt="image-20220119102054375" /></p>

<p><img src="https://s2.loli.net/2022/01/19/maKrz86NsYOBQqT.png" alt="image-20220119102111688" /></p>

<p>思路：遍历每一块陆地，看它的左边和上边是否是水域或者边界。周长=2（左边+右边）</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">islandPerimeter</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">n</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>
        <span class="n">m</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">ans</span><span class="o">=</span><span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span> <span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span> <span class="p">(</span><span class="n">m</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
                    <span class="c1">#只用看左边和上边
</span>                    <span class="k">if</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">&lt;</span><span class="mi">0</span> <span class="ow">or</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
                        <span class="n">ans</span><span class="o">=</span><span class="n">ans</span><span class="o">+</span><span class="mi">2</span>
                    <span class="k">if</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">&lt;</span><span class="mi">0</span> <span class="ow">or</span> <span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
                        <span class="n">ans</span><span class="o">=</span><span class="n">ans</span><span class="o">+</span><span class="mi">2</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="存在重复元素ii">存在重复元素II</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/19/C8aFzVuAxKZ1c4R.png" alt="image-20220119124624717" /></p>

<p><img src="https://s2.loli.net/2022/01/19/w8okO5jMvPrmB3g.png" alt="image-20220119124642783" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">containsNearbyDuplicate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">lookup</span><span class="o">=</span><span class="p">{}</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">num</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">num</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">lookup</span><span class="p">:</span>
                <span class="n">lookup</span><span class="p">[</span><span class="n">num</span><span class="p">]</span><span class="o">=</span><span class="n">i</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">i</span><span class="o">-</span><span class="n">lookup</span><span class="p">[</span><span class="n">num</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">k</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">True</span>
                <span class="n">lookup</span><span class="p">[</span><span class="n">num</span><span class="p">]</span><span class="o">=</span><span class="n">i</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<h3 id="区域和检索---数组不可变">区域和检索 - 数组不可变</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/19/WI52ph4snbkqLVC.png" alt="image-20220119124741131" /></p>

<p><img src="https://s2.loli.net/2022/01/19/KgbBOVTEIC8kcip.png" alt="image-20220119124753793" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">NumArray</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">num</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">sumRange</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span><span class="nb">int</span><span class="p">,</span><span class="n">j</span><span class="p">:</span><span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>



<span class="c1"># Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(left,right)
</span></code></pre></div></div>

<h3 id="最小栈">最小栈</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/19/KhJiH6XxFgnkZpL.png" alt="image-20220119141933666" /></p>

<p><img src="https://s2.loli.net/2022/01/19/vela1hUWdGbicsX.png" alt="image-20220119141947314" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MinStack</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="o">=</span><span class="p">[]</span>

    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">val</span><span class="p">,</span><span class="n">val</span><span class="p">))</span>
            <span class="k">return</span>
        <span class="n">curr_min</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">val</span><span class="p">,</span><span class="nb">min</span><span class="p">(</span><span class="n">curr_min</span><span class="p">,</span><span class="n">val</span><span class="p">)))</span>

    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">top</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">getMin</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>


<span class="c1"># Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
</span></code></pre></div></div>

<h3 id="最大子数组和">最大子数组和</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/19/nwgqof4IXipMPQW.png" alt="image-20220119125614864" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxSubArray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">curr_sum</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">max_sum</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">curr_sum</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">curr_sum</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">curr_sum</span><span class="o">=</span><span class="n">curr_sum</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">max_sum</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">max_sum</span><span class="p">,</span><span class="n">curr_sum</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">max_sum</span>
</code></pre></div></div>

<h2 id="120">1.20</h2>

<h3 id="第一个错误的版本">第一个错误的版本</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/22/m9ncyKdRYwvEWHJ.png" alt="image-20220122080600809" /></p>

<p><img src="https://s2.loli.net/2022/01/22/NPnIoWvFwKcA4ax.png" alt="image-20220122082610078" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># The isBadVersion API is already defined for you.
# @param version, an integer
# @return an integer
# def isBadVersion(version):
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">firstBadVersion</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="s">"""
        :type n: int
        :rtype: int
        """</span>
        <span class="n">start</span><span class="o">=</span><span class="mi">1</span>
        <span class="n">end</span><span class="o">=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span>
        <span class="k">while</span> <span class="n">start</span><span class="o">&lt;</span><span class="n">end</span><span class="p">:</span>
            <span class="n">mid</span><span class="o">=</span><span class="n">start</span><span class="o">+</span><span class="p">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
            <span class="k">if</span> <span class="n">isBadVersion</span><span class="p">(</span><span class="n">mid</span><span class="p">):</span>
                <span class="n">end</span><span class="o">=</span><span class="n">mid</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">start</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span>
        <span class="k">if</span> <span class="n">isBadVersion</span><span class="p">(</span><span class="n">start</span><span class="p">)</span><span class="o">==</span><span class="bp">True</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">start</span>
        <span class="k">if</span> <span class="n">isBadVersion</span><span class="p">(</span><span class="n">end</span><span class="p">)</span><span class="o">==</span><span class="bp">True</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">end</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div>

<h2 id="122">1.22</h2>

<h3 id="检测大写字母">检测大写字母</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/20/tOvcsLabWNZM3xl.png" alt="image-20220120194121589" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">detectCapitalUse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">cap</span><span class="o">=</span><span class="mi">0</span>
        <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">char</span><span class="p">.</span><span class="n">isupper</span><span class="p">():</span>
                <span class="n">cap</span><span class="o">=</span><span class="n">cap</span><span class="o">+</span><span class="mi">1</span>
        <span class="k">if</span> <span class="n">cap</span><span class="o">==</span><span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">elif</span> <span class="n">cap</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">elif</span> <span class="n">cap</span><span class="o">==</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">isupper</span><span class="p">():</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<h2 id="123">1.23</h2>

<h3 id="键盘行">键盘行</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/20/S6ZmkVOrJ8bgiEd.png" alt="image-20220120194349112" /></p>

<p><img src="https://s2.loli.net/2022/01/20/QlBO7Uxcpd5wgqh.png" alt="image-20220120194409290" /></p>

<p>思路：先建立三个list，把三行字母放在可以查找的空间里。先查找一个单词的首字母在哪一行，再看它其余的所有字母跟首字母是否在同一行，如果在同一行，就把这个单词添加到结果中。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findWords</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="n">top</span><span class="o">=</span><span class="p">[</span><span class="s">'q'</span><span class="p">,</span><span class="s">'w'</span><span class="p">,</span><span class="s">'e'</span><span class="p">,</span><span class="s">'r'</span><span class="p">,</span><span class="s">'t'</span><span class="p">,</span><span class="s">'y'</span><span class="p">,</span><span class="s">'u'</span><span class="p">,</span><span class="s">'i'</span><span class="p">,</span><span class="s">'o'</span><span class="p">,</span><span class="s">'p'</span><span class="p">]</span>
        <span class="n">middle</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'s'</span><span class="p">,</span><span class="s">'d'</span><span class="p">,</span><span class="s">'f'</span><span class="p">,</span><span class="s">'g'</span><span class="p">,</span><span class="s">'h'</span><span class="p">,</span><span class="s">'j'</span><span class="p">,</span><span class="s">'k'</span><span class="p">,</span><span class="s">'l'</span><span class="p">]</span>
        <span class="n">bottom</span><span class="o">=</span><span class="p">[</span><span class="s">'z'</span><span class="p">,</span><span class="s">'x'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'v'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'n'</span><span class="p">,</span><span class="s">'m'</span><span class="p">]</span>
        <span class="n">rows</span><span class="o">=</span><span class="p">[</span><span class="n">top</span><span class="p">,</span><span class="n">middle</span><span class="p">,</span><span class="n">bottom</span><span class="p">]</span>
        <span class="n">output</span><span class="o">=</span><span class="p">[]</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="n">row</span><span class="p">:</span>
                    <span class="n">result_low</span><span class="o">=</span><span class="n">row</span>
                    <span class="k">break</span>
            <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
                <span class="n">j</span><span class="o">=</span><span class="mi">0</span>
                <span class="k">if</span> <span class="n">char</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">row</span><span class="p">:</span>
                    <span class="n">j</span><span class="o">=-</span><span class="mi">1</span>
                    <span class="k">break</span>   
            <span class="k">if</span> <span class="n">j</span><span class="o">!=-</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">output</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">output</span>
</code></pre></div></div>

<h2 id="124">1.24</h2>

<h3 id="丑数">丑数</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/24/RUXHTYSdkFQlGbB.png" alt="image-20220124092154164" /></p>

<p><img src="https://s2.loli.net/2022/01/24/q7utowAjE3fW19m.png" alt="image-20220124092213370" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isUgly</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">num</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">]:</span>
            <span class="k">while</span> <span class="n">num</span><span class="o">%</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="o">/</span><span class="n">i</span>
        <span class="k">return</span> <span class="n">num</span><span class="o">==</span><span class="mi">1</span>
</code></pre></div></div>

<h3 id="相交链表">相交链表</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/24/OZlVBUpNucXRGLr.png" alt="image-20220124095249822" /></p>

<p><img src="https://s2.loli.net/2022/01/24/CFmIDx576WkZqdK.png" alt="image-20220124095411699" /></p>

<p><img src="https://s2.loli.net/2022/01/24/ImCbK3i57VZHwDr.png" alt="image-20220124095436774" /></p>

<p>思路：从两个链表各自的开头开始遍历，当其中一条最后为空而另一条还没有遍历到最后时，跳到另外一个链表开头，继续遍历。反复交换开头进行遍历，直到相等或都为空</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">getIntersectionNode</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">headA</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">,</span> <span class="n">headB</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
        <span class="n">p1</span><span class="o">=</span><span class="n">headA</span>
        <span class="n">p2</span><span class="o">=</span><span class="n">headB</span>
        <span class="k">while</span> <span class="n">p1</span><span class="o">!=</span><span class="n">p2</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">p1</span><span class="p">:</span>
                <span class="n">p1</span><span class="o">=</span><span class="n">headB</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">p1</span><span class="o">=</span><span class="n">p1</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">p2</span><span class="p">:</span>
                <span class="n">p2</span><span class="o">=</span><span class="n">headA</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">p2</span><span class="o">=</span><span class="n">p2</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">return</span> <span class="n">p1</span>
</code></pre></div></div>

<h3 id="excel-表列序号">Excel 表列序号</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/24/Xalx1svNkPTrzu9.png" alt="image-20220124102055474" /></p>

<p><img src="https://s2.loli.net/2022/01/24/bvK2VLwDq6BCHml.png" alt="image-20220124102111459" /></p>

<p>思路： 对于每一位，结果等于这一位转换为数字减去A转换为数字再加1；从左往右读进的每一个数都要乘以26</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">titleToNumber</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">s</span><span class="p">):</span>
        <span class="s">"""
        :type s: str
        :rtype: int
        """</span>
        <span class="n">result</span><span class="o">=</span><span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))):</span>
            <span class="n">result</span><span class="o">=</span><span class="n">result</span><span class="o">*</span><span class="mi">26</span>
            <span class="n">result</span><span class="o">=</span><span class="n">result</span><span class="o">+</span><span class="nb">ord</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">-</span><span class="nb">ord</span><span class="p">(</span><span class="s">'A'</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">result</span>
</code></pre></div></div>

<h2 id="125">1.25</h2>

<h3 id="存在连续三个奇数的数组">存在连续三个奇数的数组</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/25/g6mqSIhnRFeWjO7.png" alt="image-20220125210720157" /></p>

<p>思路：一个整数对2取模，余数为0则为偶数，余数为1则为奇数。用count来计数，遇到奇数加一，遇到偶数清零</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">threeConsecutiveOdds</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arr</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">count</span><span class="o">=</span><span class="mi">0</span>
        <span class="n">n</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">%</span><span class="mi">2</span><span class="o">!=</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">count</span><span class="o">=</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span>
                <span class="k">if</span> <span class="n">count</span><span class="o">==</span><span class="mi">3</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">True</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">count</span><span class="o">=</span><span class="mi">0</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<h3 id="最大连续1的个数">最大连续1的个数</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/25/hta5PfodBUl1uCx.png" alt="image-20220125212147910" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findMaxConsecutiveOnes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">count</span><span class="o">=</span><span class="mi">0</span>
        <span class="n">result</span><span class="o">=</span><span class="mi">0</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">num</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">count</span><span class="o">=</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">result</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="n">count</span><span class="p">)</span>
                <span class="n">count</span><span class="o">=</span><span class="mi">0</span>
        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="n">count</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="126">1.26</h2>

<h3 id="两个数组的交集">两个数组的交集</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/26/Pc2lGws5xKjXToF.png" alt="image-20220126082459988" /></p>

<p>思路：以nums1为基础，如果nums2中出现了和nums1中相同的元素，就把该元素添加进结果中，并且删除nums1中该元素</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">intersection</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums1</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">nums2</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">lookup</span><span class="o">=</span><span class="nb">set</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nums1</span><span class="p">:</span>
            <span class="n">lookup</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">result</span><span class="o">=</span><span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nums2</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lookup</span><span class="p">:</span>
                <span class="n">result</span><span class="o">+=</span><span class="n">i</span><span class="p">,</span>
                <span class="n">lookup</span><span class="p">.</span><span class="n">discard</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">result</span>
</code></pre></div></div>

<p>​</p>

<h3 id="单词规律">单词规律</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/26/GvqUHyQAibuMz7C.png" alt="image-20220126084213879" /></p>

<p><img src="https://s2.loli.net/2022/01/26/4XvL8exrbFD3McU.png" alt="image-20220126084258249" /></p>

<p>思路：先把str划分成一个个的单词。如果字母数量和单词数量不一样，返回False。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">wordPattern</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pattern</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">words</span><span class="o">=</span><span class="nb">str</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span><span class="o">!=</span><span class="nb">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="n">hashmap</span><span class="o">=</span><span class="p">{}</span>
        <span class="n">mapval</span><span class="o">=</span><span class="p">{}</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">pattern</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">in</span> <span class="n">hashmap</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">hashmap</span><span class="p">[</span><span class="n">pattern</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">!=</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                    <span class="k">return</span> <span class="bp">False</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">in</span> <span class="n">mapval</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
            <span class="n">hashmap</span><span class="p">[</span><span class="n">pattern</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">=</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">mapval</span><span class="p">[</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">=</span><span class="bp">True</span>
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<h3 id="移动零">移动零</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/26/P8NkLQuEDnslWR1.png" alt="image-20220126084411465" /></p>

<p>思路：将不为0的数全部移到前面，再将之后的位置上的数变为0</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">moveZeroes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s">"""
        Do not return anything, modify nums in-place instead.
        """</span>
        <span class="n">pos</span><span class="o">=</span><span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!=</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="n">pos</span><span class="o">+=</span><span class="mi">1</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span>
</code></pre></div></div>

<h3 id="各位相加">各位相加</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/26/TfQRCzrb8nHUXgv.png" alt="image-20220126084521767" /></p>

<p>思路：输入个位数，输出是它本身。</p>

<p>​          输入大于等于十的整数，输出结果为1,2,3,4,5,6,7,8,9,1（19),2（20），……，9,1,……</p>

<p>​         当输入38，（38-1）mod 9=37 mod 9=1    1+1=2</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">addDigits</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">num</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">result</span><span class="o">=</span><span class="p">(</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">9</span><span class="o">+</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">result</span>
</code></pre></div></div>

<h2 id="128">1.28</h2>

<h3 id="反转字符串">反转字符串</h3>

<p>题目：</p>

<p><img src="https://s2.loli.net/2022/01/28/UKDuWPgxYOrX4Q3.png" alt="image-20220128201846456" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reverseString</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s">"""
        Do not return anything, modify s in-place instead.
        """</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">):</span>
            <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</code></pre></div></div>

<p>​</p>]]></content><author><name>cute-rui</name></author><category term="python" /><category term="leetcode每日一题" /><summary type="html"><![CDATA[leetcode每日一题]]></summary></entry><entry><title type="html">python基础</title><link href="https://eunicehr.github.io//ruirui-daydayup/python/2022/01/10/python%E5%9F%BA%E7%A1%80.html" rel="alternate" type="text/html" title="python基础" /><published>2022-01-10T00:00:00+00:00</published><updated>2022-01-10T00:00:00+00:00</updated><id>https://eunicehr.github.io//ruirui-daydayup/python/2022/01/10/python%E5%9F%BA%E7%A1%80</id><content type="html" xml:base="https://eunicehr.github.io//ruirui-daydayup/python/2022/01/10/python%E5%9F%BA%E7%A1%80.html"><![CDATA[<h1 id="python基础">python基础</h1>

<h2 id="python语言基础">python语言基础</h2>

<h3 id="标识符">标识符</h3>

<p>标识符是编程时使用的名字，用于给变量、函数、语句块等命名，Python 中标识符由字母、数字、下划线组成，不能以数字开头，区分大小写。</p>

<p>以下划线开头的标识符有特殊含义，单下划线开头的标识符，如：_xxx ，表示不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 导入；双下划线开头的标识符，如：<strong>xx，表示私有成员；双下划线开头和结尾的标识符，如：__xx</strong>，表示 Python 中内置标识，如：<strong>init</strong>() 表示类的构造函数。</p>

<h3 id="关键字">关键字</h3>

<p>在自定义标识符时不能使用关键字</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th> </th>
      <th> </th>
      <th> </th>
      <th> </th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>and</td>
      <td>exec</td>
      <td>not</td>
      <td>assert</td>
      <td>finally</td>
      <td>or</td>
    </tr>
    <tr>
      <td>**break**</td>
      <td>**for**</td>
      <td>**pass**</td>
      <td>**class**</td>
      <td>**from**</td>
      <td>**print**</td>
    </tr>
    <tr>
      <td>**continue**</td>
      <td>**global**</td>
      <td>**raise**</td>
      <td>**def**</td>
      <td>**if**</td>
      <td>**return**</td>
    </tr>
    <tr>
      <td>**del**</td>
      <td>**import**</td>
      <td>**try**</td>
      <td>**elif**</td>
      <td>**in**</td>
      <td>**while**</td>
    </tr>
    <tr>
      <td>**else**</td>
      <td>**is**</td>
      <td>**with**</td>
      <td>**except**</td>
      <td>**lambda**</td>
      <td>**yield**</td>
    </tr>
  </tbody>
</table>

<h3 id="输入输出">输入输出</h3>

<p>Python 输出使用 print()，内容加在括号中即可</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'Hello world'</span><span class="p">)</span>
</code></pre></div></div>

<p>Python 提供了一个 input()，可以让用户输入字符串，并存放到一个变量里</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">'guanguang'</span><span class="p">,</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="缩进">缩进</h3>

<p>Python 不使用 <code class="language-plaintext highlighter-rouge">{}</code> 来控制类、函数、逻辑判断等，而是使用缩进，缩进的空格可变</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="数据类型">数据类型</h3>

<ul>
  <li><strong>整数</strong>：可以为任意大小、包含负数</li>
  <li><strong>浮点数</strong>：就是小数</li>
  <li><strong>字符串</strong>：以单引号 <code class="language-plaintext highlighter-rouge">'</code>、双引号<code class="language-plaintext highlighter-rouge">"</code>、三引号 <code class="language-plaintext highlighter-rouge">'''</code> 或 <code class="language-plaintext highlighter-rouge">"""</code>括起来的文本</li>
  <li><strong>布尔</strong>：只有 <code class="language-plaintext highlighter-rouge">True</code>、<code class="language-plaintext highlighter-rouge">False</code> 两种值</li>
  <li><strong>空值</strong>：用 <code class="language-plaintext highlighter-rouge">None</code> 表示</li>
  <li><strong>变量</strong>：是可变的</li>
  <li><strong>常量</strong>：不可变</li>
</ul>

<h3 id="python常量与变量">python常量与变量</h3>

<h4 id="python常量">python常量</h4>

<p>常量是编程语言中固定的量，它的值不能改变。例如 2 就表示数字2，不能被修改表示其他值。Python 中的常量包括数字，字符串，逻辑值三种。</p>

<ul>
  <li>数字：整数（例如2），浮点数（例如2.333 或 1e-9 = 1∗10−9）</li>
  <li>字符串：用单/双/三引号括起来的内容，例如（'Hi' 或 "Hi" 或 '''Hi'''）</li>
  <li>逻辑值：True 代表真， False 代表假</li>
</ul>

<p>使用 <code class="language-plaintext highlighter-rouge">type( * )</code> 可以查看 * 的类型，例如 <code class="language-plaintext highlighter-rouge">type(2)</code> 返回 int 表示 2 为 整数。</p>

<p>In [1]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 2 表示 整数(integer) 2
</span><span class="nb">type</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>int</p>

<p>In [2]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 2.333 与 1e-9 表示对应浮点数(float)
</span><span class="nb">type</span><span class="p">(</span><span class="mf">2.33</span><span class="p">)</span>
</code></pre></div></div>

<p>float</p>

<p>In [3]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">type</span><span class="p">(</span><span class="mf">1e-9</span><span class="p">)</span>
</code></pre></div></div>

<p>float</p>

<p>In [4]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 用单引号括起来的内容表示字符串(string)
</span>
<span class="nb">type</span><span class="p">(</span><span class="s">'这是1个字符串'</span><span class="p">)</span>
</code></pre></div></div>

<p>str</p>

<p>In [5]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## True 代表逻辑值(Boolen)
</span><span class="nb">type</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>bool</p>

<h4 id="python变量">python变量</h4>

<p>与常量相反，变量可以存储不同的值以表示不同的内容，并且它的值可以被更改。变量通过赋值符号 <code class="language-plaintext highlighter-rouge">=</code> 创建，例如 <code class="language-plaintext highlighter-rouge">variable = 1</code>。</p>

<p>注意变量存在命名规范。变量的第一个字符必须是字母或下划线，其余部分由下划线或数字组成，且区分大小写。例如 <code class="language-plaintext highlighter-rouge">a_123</code> 可以是一个变量，123_a 不可以是一个变量，<code class="language-plaintext highlighter-rouge">A_123</code> 与 <code class="language-plaintext highlighter-rouge">a_123</code> 表示两个不同变量。</p>

<p>In [7]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 创建名为 variable 的变量存储一个 整数 值
</span>
<span class="n">variable</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nb">type</span><span class="p">(</span><span class="n">variable</span><span class="p">)</span>
</code></pre></div></div>

<p>int</p>

<p>In [8]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 修改 variable 变量的值为一个字符串
</span>
<span class="n">variable</span> <span class="o">=</span> <span class="s">'Hi'</span>
<span class="nb">type</span><span class="p">(</span><span class="n">variable</span><span class="p">)</span>
</code></pre></div></div>

<p>str</p>

<p>In [9]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 常量的值无法修改 触发语法错误提示
</span>
<span class="mf">2.33</span> <span class="o">=</span> <span class="mf">2.55</span>
</code></pre></div></div>

<p>File “C:\Users\lenovo\AppData\Local\Temp/ipykernel_27972/654194107.py”, line 1
    2.33=2.55
    ^
SyntaxError: cannot assign to literal</p>

<p>In [10]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 变量的命名不满足规范 触发语法错误提示
</span>
<span class="mi">123</span><span class="n">_a</span> <span class="o">=</span> <span class="mi">1</span>
</code></pre></div></div>

<p>File “C:\Users\lenovo\AppData\Local\Temp/ipykernel_27972/566343704.py”, line 1
    123_a=1
       ^
SyntaxError: invalid decimal literal</p>

<h3 id="python运算符与函数">python运算符与函数</h3>

<h4 id="运算符">运算符</h4>

<p>其中最常用的是算数运算符与逻辑运算符，位运算符在集合操作中经常使用。</p>

<ul>
  <li>
    <p>算术运算符</p>

    <table>
      <thead>
        <tr>
          <th>运算符</th>
          <th>描述</th>
          <th>示例</th>
          <th>结果</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>+</td>
          <td>相加</td>
          <td>1+2</td>
          <td>3</td>
        </tr>
        <tr>
          <td>-</td>
          <td>相减</td>
          <td>1-2</td>
          <td>-1</td>
        </tr>
        <tr>
          <td>*</td>
          <td>相乘</td>
          <td>1*2</td>
          <td>2</td>
        </tr>
        <tr>
          <td>**</td>
          <td>幂</td>
          <td>1**2</td>
          <td>1</td>
        </tr>
        <tr>
          <td>/</td>
          <td>相除</td>
          <td>1/2</td>
          <td>0.5</td>
        </tr>
        <tr>
          <td>//</td>
          <td>取整除</td>
          <td>1//2</td>
          <td>0</td>
        </tr>
        <tr>
          <td>%</td>
          <td>取余</td>
          <td>1%2</td>
          <td>1</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>逻辑运算符</p>

    <table>
      <thead>
        <tr>
          <th>运算符</th>
          <th>描述</th>
          <th>示例</th>
          <th>结果</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>&gt;</td>
          <td>是否大于</td>
          <td>1&gt;2</td>
          <td>False</td>
        </tr>
        <tr>
          <td>&gt;=</td>
          <td>是否大于等于</td>
          <td>1&gt;=2</td>
          <td>False</td>
        </tr>
        <tr>
          <td>&lt;</td>
          <td>是否小于</td>
          <td>1&lt;2</td>
          <td>True</td>
        </tr>
        <tr>
          <td>&lt;=</td>
          <td>是否小于等于</td>
          <td>1&lt;=2</td>
          <td>True</td>
        </tr>
        <tr>
          <td>==</td>
          <td>是否相等</td>
          <td>1==2</td>
          <td>False</td>
        </tr>
        <tr>
          <td>!=</td>
          <td>是否不等于</td>
          <td>1!=2</td>
          <td>True</td>
        </tr>
        <tr>
          <td>and</td>
          <td>布尔类型与</td>
          <td>True and False</td>
          <td>False</td>
        </tr>
        <tr>
          <td>or</td>
          <td>布尔类型或</td>
          <td>True or False</td>
          <td>True</td>
        </tr>
        <tr>
          <td>not</td>
          <td>布尔类型非</td>
          <td>not True</td>
          <td>False</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>位运算符</p>

    <table>
      <thead>
        <tr>
          <th>运算符</th>
          <th>描述</th>
          <th>示例</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>»</td>
          <td>右移动</td>
          <td>a » 3</td>
        </tr>
        <tr>
          <td>«</td>
          <td>左移动</td>
          <td>a « 3</td>
        </tr>
        <tr>
          <td>&amp;</td>
          <td>与</td>
          <td>a &amp; b</td>
        </tr>
        <tr>
          <td>|</td>
          <td>或</td>
          <td>a | b</td>
        </tr>
        <tr>
          <td>^</td>
          <td>异或</td>
          <td>a ^ b</td>
        </tr>
        <tr>
          <td>~</td>
          <td>取反</td>
          <td>~a</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>运算符优先级</p>

    <table>
      <thead>
        <tr>
          <th>运算符</th>
          <th>**描述（由上至下对应优先级由高到低）**</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>**</td>
          <td>幂运算</td>
        </tr>
        <tr>
          <td>~ + -</td>
          <td>取反、正号、负号</td>
        </tr>
        <tr>
          <td>* / % //</td>
          <td>乘、除、取余、取整除</td>
        </tr>
        <tr>
          <td>+ -</td>
          <td>加法、减法</td>
        </tr>
        <tr>
          <td>&gt;&gt; «</td>
          <td>右移、左移</td>
        </tr>
        <tr>
          <td>&amp;</td>
          <td>与</td>
        </tr>
        <tr>
          <td>^ |</td>
          <td>异或、或</td>
        </tr>
        <tr>
          <td>&lt;= &lt; &gt; &gt;=</td>
          <td>比较运算符</td>
        </tr>
        <tr>
          <td>== !=</td>
          <td>是否等于、是否不等于</td>
        </tr>
        <tr>
          <td>= %= /= //= -= += *= **=</td>
          <td>赋值运算符</td>
        </tr>
        <tr>
          <td>is is not</td>
          <td>身份运算符</td>
        </tr>
        <tr>
          <td>in not in</td>
          <td>成员运算符</td>
        </tr>
        <tr>
          <td>not and or</td>
          <td>逻辑运算符</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>问题：给你任意五个整数和一个目标值target，找到这五个整数中和为target的那两个整数。</p>

    <p>例如：输入：2,3,7,11,15, target = 13
           输出：2,11
           解释：第1个数和第3个数的和为13</p>

    <p>In [11]:</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 尝试求解，改变 a b 的值依次两两尝试，直到 a + b = target
</span>  
<span class="n">target</span> <span class="o">=</span> <span class="mi">13</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">==</span> <span class="n">target</span>
</code></pre></div>    </div>

    <p>False</p>

    <p>In [12]:</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">7</span>
<span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">==</span> <span class="n">target</span>
</code></pre></div>    </div>

    <p>False</p>

    <p>In [13]:</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">11</span>
<span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">==</span> <span class="n">target</span>
</code></pre></div>    </div>

    <p>True</p>

    <p>In [14]:</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">,</span><span class="n">b</span>
</code></pre></div>    </div>

    <p>(2, 11)</p>
  </li>
</ul>

<h3 id="函数">函数</h3>

<p>​     函数是一种可复用的部件，用于定义更加复杂的操作以减少代码冗余。</p>

<ul>
  <li>
    <p>函数通过 <code class="language-plaintext highlighter-rouge">def</code> 关键字定义，函数的输入由函数名后括号内 参数 定义，函数的结果由 <code class="language-plaintext highlighter-rouge">return</code> 关键字定义。</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">函数名</span><span class="p">(</span><span class="n">参数</span><span class="p">):</span>
	<span class="n">函数体</span>
	<span class="k">return</span> <span class="n">返回值</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>如果要定义一个无任何功能的空函数，函数体只写 <code class="language-plaintext highlighter-rouge">pass</code> 即可。</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">函数名</span><span class="p">():</span>
	<span class="k">pass</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>当我们不确定参数的个数时，可以使用不定长参数，在参数名前加 <code class="language-plaintext highlighter-rouge">*</code> 进行声明</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">函数名</span><span class="p">(</span><span class="o">*</span><span class="n">参数名</span><span class="p">):</span>
	<span class="n">函数体</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>函数的 参数 由逗号分隔，在定义函数时的参数叫做形参，在使用函数时输入的参数叫做实参。</p>
  </li>
  <li>
    <p>程序中还存在着预先定义好的函数，如<code class="language-plaintext highlighter-rouge">type</code> 函数、 <code class="language-plaintext highlighter-rouge">print</code> 函数，它的功能是在屏幕输出某个变量的内容。</p>
  </li>
</ul>

<p>In [15]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 自动输出最后的 target
</span>
<span class="n">variable</span>
<span class="n">target</span>
</code></pre></div></div>

<p>13</p>

<p>In [16]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 自动输出最后的 variable
</span>
<span class="n">target</span>
<span class="n">variable</span>
</code></pre></div></div>

<p>‘Hi’</p>

<p>下面尝试定义一个函数减少之前代码的冗余</p>

<p>In [17]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## num1，num2 是输入的参数， return 后面的 a+b==target 是函数的结果
</span>
<span class="c1">## 这里num1，num2，target 是形参
</span><span class="k">def</span> <span class="nf">check_sum</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="c1">## 在 def xxx(): 下面缩进的是函数的内容
</span>    <span class="n">a</span> <span class="o">=</span> <span class="n">num1</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">num2</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">==</span> <span class="n">target</span>
</code></pre></div></div>

<p>Python的一大语法特点是缩进敏感，这里第 5，6，7 行距离开头有 1个空格 / 4个空格 的距离是为了说明第 5,6,7 行是函数的内容。</p>

<p>下面尝试调用前面定义的 check_sum 函数完成之前的任务。</p>

<p>In [18]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 这里 2,3,13 是实参，函数返回结果 False
</span>
<span class="k">print</span><span class="p">(</span><span class="n">check_sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">13</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="n">check_sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">13</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="n">check_sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">))</span>
</code></pre></div></div>

<p>False
False
True</p>

<p>无论测试哪两个数字的和与target一致，target的值是始终不变的。我们可以通过引入 局部变量 与 全局变量 简化函数。</p>

<ul>
  <li>局部变量：只在函数内部生效的变量，在函数外部无法使用。</li>
  <li>全局变量：在整个代码中都生效的变量，在函数内/外部都可使用。</li>
</ul>

<p>在 <code class="language-plaintext highlighter-rouge">check_sum</code> 中定义的变量 <code class="language-plaintext highlighter-rouge">a</code>, <code class="language-plaintext highlighter-rouge">b</code>, <code class="language-plaintext highlighter-rouge">num1</code>, <code class="language-plaintext highlighter-rouge">num2</code>, <code class="language-plaintext highlighter-rouge">target</code> 都属于局部变量。</p>

<p>在 7.1节中定义的 <code class="language-plaintext highlighter-rouge">target</code> 变量属于全局变量。在函数内部使用全局变量时，应当用 <code class="language-plaintext highlighter-rouge">global</code> 关键字予以标注</p>

<p>In [19]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 尝试在函数外部使用变量 num1，系统报错 num1 未定义
</span>
<span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>—————————————————————————</strong></p>

<p><strong>NameError</strong>                                 Traceback (most recent call last) <strong>~\AppData\Local\Temp/ipykernel_25992/2147019014.py</strong> in <module>      1 **## 尝试在函数外部使用变量 num1，系统报错 num1 未定义**      2  **----&gt; 3** print**(**num1**)** **NameError**: name 'num1' is not defined</module></p>

<p>In [20]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 尝试重新定义函数 check_sum, 此时函数参数中已不存在target
</span>
<span class="k">def</span> <span class="nf">check_sum</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">target</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">num1</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">num2</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">==</span> <span class="n">target</span>
</code></pre></div></div>

<p>In [21]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">check_sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="n">check_sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="n">check_sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">))</span>
</code></pre></div></div>

<p>False
False
True</p>

<h3 id="python控制流">python控制流</h3>

<p>通过控制流，我们可以让程序自动判断逻辑，自动跳转到某个位置，从而实现自动控制。</p>

<p>控制流中涉及几个关键字：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">if-else</code> 逻辑语句：判断某个条件是否成立，若成立则执行 if 语句，若不成立则执行 else 语句。</li>
  <li><code class="language-plaintext highlighter-rouge">while</code> 循环语句：根据某一条件重复执行某个语句块。</li>
  <li><code class="language-plaintext highlighter-rouge">for-in</code> 循环语句：根据某一序列进行循环迭代，直到迭代完整个序列。</li>
  <li><code class="language-plaintext highlighter-rouge">break</code> 停止语句：停止当前 while 或 for-in 循环。</li>
  <li><code class="language-plaintext highlighter-rouge">continue</code> 继续语句：暂停当前 while 或 for-in 循环，继续执行循环到下一个迭代。</li>
</ul>

<h4 id="while-循环语句">while 循环语句</h4>

<p>while 循环语句根据某一条件重复执行某个语句块，它的基本结构如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="o">***</span><span class="p">:</span>
    <span class="n">statement</span>
</code></pre></div></div>

<p>若 *** 的结果为 True 则继续重复执行 statement，若结果为 False 则停止循环。</p>

<p>In [22]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## while 循环语句样例
</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div></div>

<p>1
2
3
4
5</p>

<h4 id="for循环语句">for循环语句</h4>

<ul>
  <li>
    <p>for 循环可以遍历任何序列，比如：字符串</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">str</span> <span class="o">=</span> <span class="s">'Python'</span>
<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div>    </div>

    <p>P</p>

    <p>y</p>

    <p>t</p>

    <p>h</p>

    <p>o</p>

    <p>n</p>
  </li>
  <li>
    <p>for-in 对某一序列进行循环迭代，直到迭代完整个序列。</p>
  </li>
</ul>

<p>循环的基本结构如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">*</span> <span class="ow">in</span> <span class="o">***</span><span class="p">:</span>
    <span class="n">statment</span>
</code></pre></div></div>

<p>其中* * * 是被迭代的序列，* 是存储当前迭代元素的变量，当 *** 中所有元素都被迭代一次后，循环停止。</p>

<p>在下面的代码中，每次循环迭代序列中的一个元素，直到最后一个元素 5 被迭代。</p>

<p>In [23]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## for-in 循环语句样例
</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div>

<p>1
2
3
4
5</p>

<p>考虑之前的求和问题，在最坏的情况下，我们需要把所有元素两两求和才能得到答案。</p>

<p>我们用循环进行简化：</p>

<p>In [24]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 依次迭代元素 a，一共迭代 5 次
</span><span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">15</span><span class="p">]:</span>
    <span class="c1">## 依次迭代元素 b，一共迭代 5 次
</span>    <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">15</span><span class="p">]:</span>
        <span class="c1">## 每个元素 a 与 5 个元素 b 依次两两尝试，一共迭代了 5 * 5 = 25 次
</span>        <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">check_sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
</code></pre></div></div>

<p>2 2 False
2 3 False
2 7 False
2 11 True
2 15 False
3 2 False
3 3 False
3 7 False
3 11 False
3 15 False
7 2 False
7 3 False
7 7 False
7 11 False
7 15 False
11 2 True
11 3 False
11 7 False
11 11 False
11 15 False
15 2 False
15 3 False
15 7 False
15 11 False
15 15 False</p>

<p>在这个例子中,循环是可以嵌套的，在循环的每一次迭代中开启一个新的循环。外层的 <code class="language-plaintext highlighter-rouge">for a in [2, 3, 7, 11, 15]</code> 按照顺序选择第 1 个元素，内层的 <code class="language-plaintext highlighter-rouge">for b in [2, 3, 7, 11, 15]</code> 按照顺序选择第 2 个元素，每次迭代输出两个值以及是否与 target 相等。</p>

<p>最终我们找到输出 True 的两个元素 ( 2, 11 )，只要三行代码就可以解决问题</p>

<h4 id="if-else逻辑语句">if else逻辑语句</h4>

<p>if else 逻辑语句根据某一条件运行不同代码，它的基本结构如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">***</span><span class="p">:</span>
    <span class="n">statement1</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">statement2</span>
</code></pre></div></div>

<p>若 *** 的结果为 True 则执行 statement1，若结果为 False 则执行 statement2</p>

<p>通过 if-else 逻辑语句，我们可以让程序真正的实现自动化</p>

<p>In [25]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 加入 if-else 逻辑语句
</span>
<span class="n">target</span><span class="o">=</span><span class="mi">13</span>
<span class="k">def</span> <span class="nf">check_sum</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">target</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">num1</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">num2</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">==</span> <span class="n">target</span>
<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">15</span><span class="p">]:</span>
    <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">15</span><span class="p">]:</span>
        <span class="c1">## 如果 check_sum(a,b)的结果为 True 则 输出，否则什么也不做
</span>        <span class="k">if</span> <span class="n">check_sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">pass</span>
</code></pre></div></div>

<p>2 11
11 2</p>

<p>通过 if-else 逻辑语句，我们仅输出求和等于 target 的两个元素，不再需要从输出结果中逐个查找。</p>

<h4 id="break停止语句">break停止语句</h4>

<p>break 用在 for 循环和 while 循环语句中，用来终止整个循环。在上面的例子中，我们仅输出 1 种顺序即可，可以添加 break 停止语句在找到符合条件的两个元素后停止。</p>

<p>注意 break 仅能跳出当前循环，因此我们需要添加一个 finded 变量记录是否已找到符合条件的两个元素，若找到后外层循环也使用 break 跳出。</p>

<p>In [26]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 添加 break 停止语句
</span>
<span class="c1">## finded 初始为 False
</span><span class="n">finded</span> <span class="o">=</span> <span class="bp">False</span>
<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">15</span><span class="p">]:</span>
    <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">15</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">check_sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
            <span class="c1">## 若找到则 finded 变为 True
</span>            <span class="n">finded</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">pass</span>
    <span class="c1">## 若 finded 为 True，停止外层循环
</span>    <span class="k">if</span> <span class="n">finded</span><span class="p">:</span>
        <span class="k">break</span>
</code></pre></div></div>

<p>2 11</p>

<h4 id="continue继续语句">continue继续语句</h4>

<p>continue 用在 for 循环和 while 循环语句中，停止当前循环并继续执行循环到下一个迭代</p>

<p>In [27]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">15</span><span class="p">]:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="k">continue</span>
    <span class="c1">## continue 使循环停止，并继续执行下一个迭代，后面的内容被跳过
</span>    <span class="k">print</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>2
3
7
11
15</p>

<h4 id="pass语句">pass语句</h4>

<p>pass 是空语句，它不做任何事情，一般用做占位语句，作用是保持程序结构的完整性</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">pass</span>
</code></pre></div></div>

<h2 id="python数据结构">python数据结构</h2>

<p>数据结构是能够将数据组合在一起的一种结构。</p>

<p>Python 中常用的数据结构有：</p>

<ul>
  <li>序列 List: 用于保存有序项集合的变量，以 <code class="language-plaintext highlighter-rouge">[ ]</code> 标识。</li>
  <li>元组 Tuple: 用于保存有序项集合的常量，以 <code class="language-plaintext highlighter-rouge">( )</code> 标识。</li>
  <li>字典 Dict: 用于保存无序（键，值）项集合的变量，以 <code class="language-plaintext highlighter-rouge">{ }</code> 标识。</li>
  <li>集合 Set: 用于保存无序项集合的变量，以 <code class="language-plaintext highlighter-rouge">{ }</code> 标识。</li>
</ul>

<h3 id="序列">序列</h3>

<p>序列是用于保存有序项集合的变量，通过方括号创建。</p>

<p>创建一个含有四个整数的列表。</p>

<p>In [1]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</code></pre></div></div>

<p>序列支持以下操作：</p>

<ul>
  <li>增：通过函数 <code class="language-plaintext highlighter-rouge">append</code> 可以向序列内增加元素</li>
  <li>删：通过关键字 <code class="language-plaintext highlighter-rouge">del</code> 可以删除序列内元素</li>
  <li>查：通过关键字 <code class="language-plaintext highlighter-rouge">[ ]</code> 可以查找序列某个位置元素</li>
  <li>改：通过赋值符号 <code class="language-plaintext highlighter-rouge">=</code> 可以修改某个位置的元素</li>
</ul>

<p>序列的优点是：</p>

<ul>
  <li>快速向尾部添加元素</li>
  <li>快速遍历所有元素</li>
  <li>节省占用计算机内容空间</li>
</ul>

<h4 id="查找元素">查找元素</h4>

<ul>
  <li>通过 <code class="language-plaintext highlighter-rouge">[ ]</code> 关键字查找序列中某个位置的元素。</li>
</ul>

<p>例如 <code class="language-plaintext highlighter-rouge">l[0]</code> 可以获取序列中首个元素，<code class="language-plaintext highlighter-rouge">l[1]</code> 可以获取序列中第 2 个元素。同时它还支持倒序查找，例如 <code class="language-plaintext highlighter-rouge">l[-1]</code> 表示倒数第一个元素。</p>

<p>In [2]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 查找第 1 个元素
</span><span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="c1">## 查找第 2 个元素
</span><span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="c1">## 查找第 最后一个 元素
</span><span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
<span class="c1">## 查找倒数第 2 个元素
</span><span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>
</code></pre></div></div>

<p>1
2
4
3</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">[ ]</code> 关键字也可以通过 “切片” 的形式获取含有多个元素的子序列。</p>

    <p>如 <code class="language-plaintext highlighter-rouge">l[0:2]</code> 代表序列从中第 1个元素 到 第3个元素（前开后闭，不包括第3个元素）</p>
  </li>
</ul>

<p>In [3]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 查找第 1 到 第 3 的元素子序列
</span><span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">])</span>
<span class="c1">## 查找第 2 到 最后 的元素子序列
</span><span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<p>[1, 2]
[2, 3]</p>

<h4 id="修改元素">修改元素</h4>

<p>通过 <code class="language-plaintext highlighter-rouge">[ ]</code> 关键字同样可以修改序列中某个位置的元素，类似的它也支持倒序以及切片的形式。</p>

<p>In [4]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 修改 第1个 元素的值为 -1
</span><span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
<span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</code></pre></div></div>

<p>[-1, 2, 3, 4]</p>

<p>In [5]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 修改从第 1 到第 3 的元素子序列的值为 [-1, -2]
</span><span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</code></pre></div></div>

<p>[-1, -2, 3, 4]</p>

<h4 id="增加元素">增加元素</h4>

<p>通过 <code class="language-plaintext highlighter-rouge">append</code> 函数可以实现向序列尾部添加新的元素。</p>

<p>In [6]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 向集合尾部添加元素 5
</span><span class="n">l</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
<span class="c1">## 向集合尾部添加元素 6
</span><span class="n">l</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</code></pre></div></div>

<p>[-1, -2, 3, 4, 5]
[-1, -2, 3, 4, 5, 6]</p>

<h4 id="删除元素">删除元素</h4>

<p>通过 <code class="language-plaintext highlighter-rouge">del</code> 关键字可以删除序列某个位置的元素。</p>

<p>In [7]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 删除序列 第1个 元素
</span><span class="k">del</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
<span class="c1">## 删除序列 最后一个 元素
</span><span class="k">del</span> <span class="n">l</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</code></pre></div></div>

<p>[-2, 3, 4, 5, 6]
[-2, 3, 4, 5]</p>

<h3 id="元组tuple">元组tuple</h3>

<p>元组（tuple）与列表类似，但元组是不可变的，可简单将其看作是不可变的列表，元组常用于保存不可修改的内容:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">planets</span> <span class="o">=</span> <span class="p">(</span><span class="n">Mercury</span><span class="p">,</span> <span class="n">Venus</span><span class="p">,</span> <span class="n">Earth</span><span class="p">,</span> <span class="n">Mars</span><span class="p">,</span> <span class="n">Jupiter</span><span class="p">,</span> <span class="n">Saturn</span><span class="p">,</span> <span class="n">Uranus</span><span class="p">,</span> <span class="n">Neptune</span><span class="p">)</span>
</code></pre></div></div>

<p>创建一个含有四个元素的元组</p>

<p>In [15]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</code></pre></div></div>

<p>In [16]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 尝试修改元组，提示元素无法被赋值
</span>
<span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div>

<p><strong>—————————————————————————</strong></p>

<p><strong>TypeError</strong>                                 Traceback (most recent call last) <strong>~\AppData\Local\Temp/ipykernel_25992/897249079.py</strong> in <module>      1 t **=** **(****1,** **2****,** **3****,** **4****)** **----&gt; 2** t**[****0]** **=** **-****1** **TypeError**: 'tuple' object does not support item assignment</module></p>

<p>In [17]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 尝试增加元素，系统提示不支持 append 操作
</span><span class="n">t</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>—————————————————————————</strong></p>

<p><strong>AttributeError</strong>                            Traceback (most recent call last) <strong>~\AppData\Local\Temp/ipykernel_25992/2952264705.py</strong> in <module>      1 t **=** **(****1,** **2****,** **3****,** **4****)** **----&gt; 2** t**.**append**(****5)** **AttributeError**: 'tuple' object has no attribute 'append'</module></p>

<p>In [18]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 尝试删除元素，系统提示元素无法被删除
</span><span class="k">del</span> <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<p><strong>—————————————————————————</strong></p>

<p><strong>TypeError</strong>                                 Traceback (most recent call last) <strong>~\AppData\Local\Temp/ipykernel_25992/53302408.py</strong> in <module>      1 t **=** **(****1,** **2****,** **3****,** **4****)** **----&gt; 2 \**\*\*del\*\**\*** t**[****0]** **TypeError**: 'tuple' object doesn't support item deletion</module></p>

<h3 id="字典">字典</h3>

<p>字典就像现实世界中的字典，只要知道一个单词的读音，就能找到它在书中具体的位置。将一个 “键(key)” 与 “值(value)” 相关联，通过键迅速检索到对应的值。要注意键必须是唯一的。</p>

<p>字典通过花括号 <code class="language-plaintext highlighter-rouge">{ }</code> 创建，通过 <code class="language-plaintext highlighter-rouge">:</code> 符号区分键与值，通过逗号分隔</p>

<p>创建一个字典存储联系人的邮箱</p>

<p>In [19]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ab</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"XiaoHu"</span><span class="p">:</span> <span class="s">"xiaohu@RNG.com"</span><span class="p">,</span>
    <span class="s">"XiaoWei"</span><span class="p">:</span> <span class="s">"xiaowei@RNG.com"</span><span class="p">,</span>
    <span class="s">"XiaoMing"</span><span class="p">:</span> <span class="s">"xiaoming@RNG.com"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In [20]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">ab</span><span class="p">)</span>
</code></pre></div></div>

<p>{‘XiaoHu’: ‘xiaohu@RNG.com’, ‘XiaoWei’: ‘xiaowei@RNG.com’, ‘XiaoMing’: ‘xiaoming@RNG.com’}</p>

<p>字典支持以下操作：</p>

<ul>
  <li>增：通过关键字 <code class="language-plaintext highlighter-rouge">[ ]</code> 可以向序列内增加元素</li>
  <li>删：通过关键字 <code class="language-plaintext highlighter-rouge">del</code> 可以删除序列内元素</li>
  <li>查：通过关键字 <code class="language-plaintext highlighter-rouge">[ ]</code> 可以查找序列某个位置元素</li>
  <li>改：通过赋值符号 <code class="language-plaintext highlighter-rouge">=</code> 可以修改某个位置的元素</li>
</ul>

<p>字典的优点：</p>

<ul>
  <li>快速检索到键对应的值</li>
  <li>字典内的键值不存在顺序关系</li>
</ul>

<h4 id="增加元素-1">增加元素</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 通过 [ ] 关键字 与赋值符号 = 向字典添加新的元素
</span>
<span class="n">ab</span><span class="p">[</span><span class="s">'Cryin'</span><span class="p">]</span> <span class="o">=</span> <span class="s">"cryin@RNG.com"</span>
<span class="k">print</span><span class="p">(</span><span class="n">ab</span><span class="p">)</span>
</code></pre></div></div>

<p>{‘XiaoHu’: ‘xiaohu@RNG.com’, ‘XiaoWei’: ‘xiaowei@RNG.com’, ‘XiaoMing’: ‘xiaoming@RNG.com’, ‘Cryin’: ‘cryin@RNG.com’}</p>

<h4 id="删除元素-1">删除元素</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 通过 del 关键字 删除字典中的元素
</span>
<span class="k">del</span> <span class="n">ab</span><span class="p">[</span><span class="s">'XiaoMing'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">ab</span><span class="p">)</span>
</code></pre></div></div>

<p>{‘XiaoHu’: ‘xiaohu@RNG.com’, ‘XiaoWei’: ‘xiaowei@RNG.com’, ‘Cryin’: ‘cryin@RNG.com’}</p>

<h4 id="查找元素-1">查找元素</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 通过 [ ] 关键字根据键查找值
</span>
<span class="k">print</span><span class="p">(</span><span class="n">ab</span><span class="p">[</span><span class="s">'XiaoHu'</span><span class="p">])</span>
</code></pre></div></div>

<p>xiaohu@RNG.com</p>

<p>In [24]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 通过 in 关键字可以查找某个键是否在字典中
</span><span class="k">print</span><span class="p">(</span><span class="s">'XiaoHu'</span> <span class="ow">in</span> <span class="n">ab</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'UZI'</span> <span class="ow">in</span> <span class="n">ab</span><span class="p">)</span>
</code></pre></div></div>

<p>True
False</p>

<h4 id="修改元素-1">修改元素</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 通过 [ ] 关键字 与赋值符号 = 修改字典内的元素
</span>
<span class="n">ab</span><span class="p">[</span><span class="s">'XiaoHu'</span><span class="p">]</span> <span class="o">=</span> <span class="s">"xiaohu@EDG.com"</span>
<span class="k">print</span><span class="p">(</span><span class="n">ab</span><span class="p">)</span>
</code></pre></div></div>

<p>{‘XiaoHu’: ‘xiaohu@EDG.com’, ‘XiaoWei’: ‘xiaowei@RNG.com’, ‘Cryin’: ‘cryin@RNG.com’}</p>

<h3 id="集合">集合</h3>

<p>集合是用来存储无序的元素集合。通常我们只考虑元素的存在，而不考虑元素的顺序或出现次数时使用集合。</p>

<p>集合与字典一样也通过花括号创建，但不存在 : 分隔符号。例如用集合表示中国的四个直辖市，它们无需考虑顺序与出现次数。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">municipalities</span> <span class="o">=</span> <span class="p">{</span> <span class="s">"Beijing"</span><span class="p">,</span> <span class="s">"Shanghai"</span><span class="p">,</span> <span class="s">"Tianjin"</span><span class="p">,</span> <span class="s">"Chongqing"</span> <span class="p">}</span>
</code></pre></div></div>

<p>注意集合中不能存在重复元素</p>

<p>In [30]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 创建一个集合
</span>
<span class="n">s</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">}</span>
</code></pre></div></div>

<p>集合支持以下操作：</p>

<ul>
  <li>增：通过函数 <code class="language-plaintext highlighter-rouge">add</code> 可以向集合内增加元素</li>
  <li>删：通过函数 <code class="language-plaintext highlighter-rouge">remove</code> 可以删除集合内元素</li>
  <li>查：通过关键字 <code class="language-plaintext highlighter-rouge">in</code> 可以查找某个元素是否在集合内</li>
</ul>

<p>集合的优点：</p>

<ul>
  <li>支持数学集合操作</li>
  <li>快速检索某个元素是否在集合内</li>
  <li>集合内的键值不存在顺序关系</li>
</ul>

<h4 id="增加元素-2">增加元素</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 增加新的元素到集合中
</span>
<span class="n">s</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<p>{1, 2, 3, 4, 5, 6}</p>

<h4 id="删除元素-2">删除元素</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 删除集合中某个元素
</span>
<span class="n">s</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<p>{1, 2, 3, 4, 5}</p>

<h4 id="查找元素-2">查找元素</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 查找某个元素是否在集合中
</span><span class="k">print</span><span class="p">(</span><span class="mi">5</span> <span class="ow">in</span> <span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="mi">6</span> <span class="ow">in</span> <span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<p>True
False</p>

<h4 id="数学操作">数学操作</h4>

<p>集合的一大特点是支持数学操作，其中包括求集合的 并集、交集 以及 亦或 操作。</p>

<p>In [34]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 创建另一个集合
</span><span class="n">s2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">}</span>
</code></pre></div></div>

<p>In [35]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 集合并集
</span><span class="k">print</span><span class="p">(</span><span class="n">s</span> <span class="o">|</span> <span class="n">s2</span><span class="p">)</span>
</code></pre></div></div>

<p>{1, 2, 3, 4, 5, 6, 7}</p>

<p>In [36]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 集合交集
</span><span class="k">print</span><span class="p">(</span><span class="n">s</span> <span class="o">&amp;</span> <span class="n">s2</span><span class="p">)</span>
</code></pre></div></div>

<p>{3, 4, 5}</p>

<p>In [37]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 集合异或
</span><span class="k">print</span><span class="p">(</span><span class="n">s</span> <span class="o">^</span> <span class="n">s2</span><span class="p">)</span>
</code></pre></div></div>

<p>{1, 2, 6, 7}</p>

<h2 id="python面向对象编程">python面向对象编程</h2>

<h3 id="面向对象编程理论">面向对象编程理论</h3>

<p>面向对象通过类与对象的方式解决问题：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 根据功能定义类1
</span><span class="n">类1</span><span class="err">：</span>
    <span class="n">类函数1</span>
<span class="n">变量</span><span class="err">：</span>
    <span class="n">变量1</span>
    <span class="n">变量2</span>

<span class="c1">## 根据功能定义类2
</span><span class="n">类2</span><span class="err">：</span>
    <span class="n">类函数2</span>
    <span class="n">类函数3</span>
<span class="n">变量</span><span class="err">：</span>
    <span class="n">变量3</span>
    <span class="n">变量4</span>
    <span class="n">变量5</span>

<span class="c1">## 通过对象完成操作
</span><span class="n">对象1</span> <span class="o">=</span> <span class="n">类1</span><span class="p">()</span>
<span class="n">对象2</span> <span class="o">=</span> <span class="n">类2</span><span class="p">()</span>
<span class="n">对象2</span><span class="p">.</span><span class="n">变量5</span> <span class="o">=</span> <span class="n">对象2</span><span class="p">.</span><span class="n">函数2</span><span class="p">(</span><span class="n">对象1</span><span class="p">.</span><span class="n">函数1</span><span class="p">())</span>
</code></pre></div></div>

<p>面向对象编程的出现，使得变量和函数可以根据功能进行整理分类，通过面向对象的模块化编程，大大减轻了复杂程序的设计与维护负担。</p>

<h4 id="对象">对象</h4>

<p>在 Python 中一切都是对象</p>

<p>对象都具有以下三个特性：</p>

<ul>
  <li>每个对象都有一个独特的名字以区别于其他对象。</li>
  <li>有属性来描述它的某些特征。</li>
  <li>有一组操作，每个操作决定对象的一种行为。</li>
</ul>

<h4 id="类">类</h4>

<p>描述具有相同属性和方法的集合，简单来说就是一个模板，通它来创建对象。在 Python 中类是一组具有相同数据和操作的对象的模板集合。</p>

<h4 id="面向对象编程特点">面向对象编程特点</h4>

<p>面向对象编程有以下几个基本特征：</p>

<ul>
  <li>抽象：是将有关事物的特征归纳、集中的过程。</li>
  <li>封装：是把数据和操作集中在对象内部，并尽可能隐藏对象的内部细节。</li>
  <li>继承：是指一个类可以继承另一个类的特征与功能，并添加自己的特征。</li>
  <li>多态：指不同的对象进行相同操作时产生多种不同的行为方式。</li>
</ul>

<h3 id="python面向对象编程-1">python面向对象编程</h3>

<p><code class="language-plaintext highlighter-rouge">names.append('Cryin')</code> 这种写法中序列变量 names 可以通过符号 . 调用 append 函数。这种编程方式是面向对象编程，在这里 names 是一个对象，对象拥有很多类似 append 的函数，每个对象都属于某一个类。</p>

<h4 id="python类与对象">python类与对象</h4>

<p>Python 使用 class 关键字定义类，类似函数，下面的缩进部分构成了类的主体：</p>

<p>In [1]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 创建一个 student 类
</span><span class="k">class</span> <span class="nc">student</span><span class="p">():</span>
    <span class="k">pass</span>
</code></pre></div></div>

<p>使用类的名字和一对括号可以创建类的对象：</p>

<p>In [2]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 使用 类的名字 student 与 括号() 可以创建类的对象 xiaohu
</span><span class="n">xiaohu</span> <span class="o">=</span> <span class="n">student</span><span class="p">()</span>
<span class="n">xiaoming</span> <span class="o">=</span> <span class="n">student</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">xiaohu</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">xiaoming</span><span class="p">))</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">__main__</span><span class="p">.</span><span class="n">student</span><span class="s">'&gt;
&lt;class '</span><span class="n">__main__</span><span class="p">.</span><span class="n">student</span><span class="s">'&gt;
</span></code></pre></div></div>

<h4 id="类与对象中的变量">类与对象中的变量</h4>

<p>类与对象都有包含一组属性与方法，在 Python 中类的变量用于表示类的属性。<code class="language-plaintext highlighter-rouge">student</code> 表示学生类，在我们的系统中我们只关注学生的姓名、数学成绩和语文成绩而不考虑其他，分别用类变量 <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">math_score</code>, <code class="language-plaintext highlighter-rouge">language_score</code> 表示。这体现了面向对象编程的”抽象性“。</p>

<p>In [3]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 创建一个 student 类
</span><span class="k">class</span> <span class="nc">student</span><span class="p">():</span>
    <span class="c1">## 类的内部定义三个内部变量，并定义他们的初始值
</span>    <span class="n">name</span> <span class="o">=</span> <span class="s">'Undifined'</span>
    <span class="n">math_score</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="n">language_score</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div>

<p>在 Python 中对象拥有与类相同的数据和操作，因此通过类创建的对象也拥有相同的变量。我们使用 <code class="language-plaintext highlighter-rouge">.</code> 符号来引用对象或类的变量与函数:</p>

<p>In [4]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 使用 类的名字 student 与 括号() 可以创建类的对象 xiaohu
</span><span class="n">xiaohu</span> <span class="o">=</span> <span class="n">student</span><span class="p">()</span>
<span class="c1">## 使用 . 符号引用对象xiaohu的变量name、math_score、language_score
</span><span class="k">print</span><span class="p">(</span><span class="n">xiaohu</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">xiaohu</span><span class="p">.</span><span class="n">math_score</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">xiaohu</span><span class="p">.</span><span class="n">language_score</span><span class="p">)</span>
</code></pre></div></div>

<p>Undifined
-1
-1</p>

<p>这里我们通过类创建对象还仅仅是一个初始值，这里我们可以通过赋值符号改变对象内数据的值：</p>

<p>In [5]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 通过赋值符号改变对象内变量的值
</span><span class="n">xiaohu</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">'XiaoHu'</span>
<span class="n">xiaohu</span><span class="p">.</span><span class="n">math_score</span> <span class="o">=</span> <span class="mi">65</span>
<span class="n">xiaohu</span><span class="p">.</span><span class="n">language_score</span> <span class="o">=</span> <span class="mi">55</span>

<span class="k">print</span><span class="p">(</span><span class="n">xiaohu</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">xiaohu</span><span class="p">.</span><span class="n">math_score</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">xiaohu</span><span class="p">.</span><span class="n">language_score</span><span class="p">)</span>
</code></pre></div></div>

<p>XiaoHu
65
55</p>

<p>在这里我们要注意区分两个概念，类变量与对象变量，在上述代码中 <code class="language-plaintext highlighter-rouge">student.name</code> 是类变量，<code class="language-plaintext highlighter-rouge">xiaohu.name</code> 是对象变量。</p>

<ul>
  <li>类变量属于类，更改类变量会影响所有后续由该类创建对象的属性。</li>
  <li>对象变量属于对象，更改对象变量只影响该对象的属性。</li>
</ul>

<p>In [6]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 更改对象变量只影响该对象的属性。
</span><span class="n">xiaoming</span> <span class="o">=</span> <span class="n">student</span><span class="p">()</span>
<span class="c1">## 修改 xiaoming.name，xiaohu 的属性不受影响
</span><span class="n">xiaoming</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">'XiaoMing'</span>
<span class="k">print</span><span class="p">(</span><span class="n">xiaoming</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">xiaohu</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>

<p>XiaoMing
XiaoHu</p>

<p>In [7]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 更改类变量会影响所有后续由该类创建对象的属性。
</span><span class="n">xiaoming</span> <span class="o">=</span> <span class="n">student</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">xiaoming</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>

<span class="c1">## 修改 student.name 再次创建新对象 xiaoming
</span><span class="n">student</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">'Change Name'</span>
<span class="n">xiaoming</span> <span class="o">=</span> <span class="n">student</span><span class="p">()</span>

<span class="c1">## xiaoming.name 不再是 undefined 而是 change name
</span><span class="k">print</span><span class="p">(</span><span class="n">xiaoming</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>

<p>Undefined
Change Name</p>

<h4 id="类与对象中的函数">类与对象中的函数</h4>

<p>在 Python 中类函数用于表示类的操作，它又被称作为“方法”。它们与之前学到的函数类似，但是类函数必须有一个额外的 self 参数：</p>

<p>In [8]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">student</span><span class="p">():</span>
    <span class="c1">## 定义类函数时要有一个特殊的 self 参数
</span>    <span class="k">def</span> <span class="nf">print_name</span><span class="p">(</span><span class="bp">self</span><span class="p">,):</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>

<p>name = ‘Undifined’
math_score = -1
language_score = -1</p>

<p>In [9]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xiaohu</span> <span class="o">=</span> <span class="n">student</span><span class="p">()</span>
<span class="n">xiaohu</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">'Xiaohu'</span>
<span class="n">xiaohu</span><span class="p">.</span><span class="n">print_name</span><span class="p">()</span>
</code></pre></div></div>

<p>Xiaohu</p>

<p>self 函数用于在类的内部指向对象本身，它是用于连接 类 与 对象 的工具，也是 Python 面向对象编程“多态”特性的一种体现。</p>

<p>例如在上述代码，使用 student 类产生对象 xiaohu，那么 self 就代指 xiaohu；如果产生对象 xiaoming，那么 self 就会自动代指 xiaoming。因此 self 参数可以根据不同对象产生不同操作，这体现了面向对象编程的“多态性”。</p>

<p>还可以给 student 创建一个用于更改成绩的方法，这样后续就不需要通过赋值符号更改对象内的数据：</p>

<p>In [10]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">student</span><span class="p">():</span>
    <span class="c1">## 定义一个修改对象数据值的函数
</span>    <span class="k">def</span> <span class="nf">change_score</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">course_name</span><span class="p">,</span> <span class="n">score</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">course_name</span> <span class="o">==</span> <span class="s">'math'</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">math_score</span> <span class="o">=</span> <span class="n">score</span>
        <span class="k">if</span> <span class="n">course_name</span> <span class="o">==</span> <span class="s">'language'</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">language_score</span> <span class="o">=</span> <span class="n">score</span>
        <span class="c1">## 如果输入的 course_name 不是 math 或者 language，则输出错误信息
</span>            <span class="k">print</span><span class="p">(</span><span class="n">course_name</span><span class="p">,</span> <span class="s">" course is still not in current system"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">print_name</span><span class="p">(</span><span class="bp">self</span><span class="p">,):</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        
    <span class="n">name</span> <span class="o">=</span> <span class="s">'Undifined'</span>
    <span class="n">math_score</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="n">language_score</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div>

<p>In [11]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xiaohu</span> <span class="o">=</span> <span class="n">student</span><span class="p">()</span>
<span class="n">xiaohu</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">'Xiaohu'</span>
<span class="n">xiaohu</span><span class="p">.</span><span class="n">change_score</span><span class="p">(</span><span class="s">'math'</span><span class="p">,</span> <span class="mi">65</span><span class="p">)</span>
<span class="n">xiaohu</span><span class="p">.</span><span class="n">change_score</span><span class="p">(</span><span class="s">'language'</span><span class="p">,</span><span class="mi">55</span><span class="p">)</span>
<span class="n">xiaohu</span><span class="p">.</span><span class="n">change_score</span><span class="p">(</span><span class="s">'physics'</span><span class="p">,</span><span class="mi">48</span><span class="p">)</span>
</code></pre></div></div>

<p>language  course is still not in current system</p>

<p>假设当我们有了十多种课程后，用户不再需要了解 student 类中有定义哪些变量等复杂细节，只需要了解 change_score 函数的用法便可以更改学生成绩，这体现了面向对象编程的“封装性”。</p>

<h4 id="_-init-_方法">_ init _方法</h4>

<p>Python 类中有一种 <code class="language-plaintext highlighter-rouge">__init__</code> 方法专门用于初始化对象。这个方法在通过类创建对象时被自动调用，并按照你的想法初始化该对象。</p>

<p>下面我们通过 <code class="language-plaintext highlighter-rouge">__init__</code> 方法重新定义 student 类：</p>

<p>In [12]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">student</span><span class="p">():</span>
    <span class="c1">## 定义 __init__ 方法，通过该方法的参数输入初始值，在该方法内部为变量赋值
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">math_score</span><span class="p">,</span> <span class="n">language_score</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">math_score</span> <span class="o">=</span> <span class="n">math_score</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">language_score</span> <span class="o">=</span> <span class="n">language_score</span>
    
    <span class="k">def</span> <span class="nf">change_score</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">course_name</span><span class="p">,</span> <span class="n">score</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">course_name</span> <span class="o">==</span> <span class="s">'math'</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">math_score</span> <span class="o">=</span> <span class="n">score</span>
        <span class="k">elif</span> <span class="n">course_name</span> <span class="o">==</span> <span class="s">'language'</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">language_score</span> <span class="o">=</span> <span class="n">score</span>
        <span class="c1">## 如果输入的 course_name 不是 math 或者 language，则输出错误信息
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">course_name</span><span class="p">,</span> <span class="s">" course is still not in current system"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">print_name</span><span class="p">(</span><span class="bp">self</span><span class="p">,):</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    
    <span class="n">name</span> <span class="o">=</span> <span class="s">'Undifined'</span>
    <span class="n">math_score</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="n">language_score</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div>

<p>在定义了 <code class="language-plaintext highlighter-rouge">__init__</code> 方法后，我们通过在类后面的小括号内传递参数的方式初始化对象：</p>

<p>In [13]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 
</span><span class="n">xiaohu</span> <span class="o">=</span> <span class="n">student</span><span class="p">(</span><span class="s">'XiaoHu'</span><span class="p">,</span><span class="mi">65</span><span class="p">,</span><span class="mi">55</span><span class="p">)</span>
<span class="n">xiaohu</span><span class="p">.</span><span class="n">print_name</span><span class="p">()</span>
</code></pre></div></div>

<p>XiaoHu</p>

<h3 id="万物皆对象">万物皆对象</h3>

<p>对象是 Python 中最核心的概念</p>

<h4 id="重识变量">重识变量</h4>

<p>在 Python 中所有变量都是对象，下面我们创建一个 int 变量，它有 bit_lenth, conjugate, to_byte, from_byte 等方法。我们测试一下 to_byte 方法：</p>

<p>In [14]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">variable</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nb">type</span><span class="p">(</span><span class="n">variable</span><span class="p">)</span>
</code></pre></div></div>

<p>int</p>

<p>to_byte 将 int 对象转化成 byte 对象 b’\x00x\01’ 因为整数 1 的二进制编码是 0001。</p>

<p>In [15]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">variable_byte</span> <span class="o">=</span> <span class="n">variable</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">byteorder</span> <span class="o">=</span> <span class="s">'big'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">variable_byte</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">variable_byte</span><span class="p">))</span>
</code></pre></div></div>

<p>b’\x00\x01’
&lt;class ‘bytes’&gt;</p>

<h4 id="重识常量">重识常量</h4>

<p>Python 中的常量也是对象，其中最常用到对象方法的是字符串常量。</p>

<p>字符串常用方法如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">format()</code>: 用于从其他信息中构造字符串。</li>
  <li><code class="language-plaintext highlighter-rouge">replace()</code>: 用于替代字符串中的某个字符或子串。</li>
  <li><code class="language-plaintext highlighter-rouge">split()</code>: 用于通过某种字符分隔字符串。</li>
  <li><code class="language-plaintext highlighter-rouge">upper()</code>: 把字符串转换成大写。</li>
  <li><code class="language-plaintext highlighter-rouge">lower()</code>: 把字符串转化成小写。</li>
</ul>

<p>In [16]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## format 方法使用 {数字 i} 对应 (第i个变量) 来控制用于构造字符串的参数 
</span><span class="k">print</span><span class="p">(</span><span class="s">"Learn {0} in a {1} way!!"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">'Python'</span><span class="p">,</span><span class="s">'smart'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Learn {0} in a {1} way!!"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">'PHP'</span><span class="p">,</span><span class="s">'hard'</span><span class="p">))</span>
</code></pre></div></div>

<p>Learn Python in a smart way!!
Learn PHP in a hard way!!</p>

<p>In [17]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## replace 方法使用一个或多个参数分隔字符串，并返回子串构成的序列
</span><span class="k">print</span><span class="p">(</span><span class="s">"Learn Python in a smart way!!"</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'smart'</span><span class="p">,</span><span class="s">'hard'</span><span class="p">))</span>
</code></pre></div></div>

<p>Learn Python in a hard way!!</p>

<p>In [18]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## split 方法使用一个或多个参数分隔字符串，并返回子串构成的序列
</span><span class="k">print</span><span class="p">(</span><span class="s">"Learn Python in a smart way!!"</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">))</span>
</code></pre></div></div>

<p>[‘Learn’, ‘Python’, ‘in’, ‘a’, ‘smart’, ‘way!!’]</p>

<p>In [19]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## upper 和 lower 方法转化大小写
</span><span class="k">print</span><span class="p">(</span><span class="s">"Learn Python in a smart way!!"</span><span class="p">.</span><span class="n">upper</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Learn Python in a smart way!!"</span><span class="p">.</span><span class="n">lower</span><span class="p">())</span>
</code></pre></div></div>

<p>LEARN PYTHON IN A SMART WAY!!
learn python in a smart way!!</p>

<h4 id="重识函数">重识函数</h4>

<p>在 Python 中函数也是对象，因此函数也有自己的数据与方法。</p>

<p>In [20]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">check_sum</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="c1">## 在 def xxx(): 下面缩进的是函数的内容
</span>    <span class="n">a</span> <span class="o">=</span> <span class="n">num1</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">num2</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">==</span> <span class="n">target</span>
</code></pre></div></div>

<p>通过 <code class="language-plaintext highlighter-rouge">.__name__</code> 成员变量可以获得函数的名字：</p>

<p>In [21]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">check_sum</span><span class="p">.</span><span class="n">__name__</span>
</code></pre></div></div>

<p>‘check_sum’</p>

<h4 id="重识数据结构">重识数据结构</h4>

<p>数据结构也是对象。数据结构为我们提供了许多非常的方法。 <code class="language-plaintext highlighter-rouge">append</code> 就是其中一个。</p>

<p>In [22]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</code></pre></div></div>

<p>In [23]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">l</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</code></pre></div></div>

<p>[1, 2, 3, 4, 5]</p>

<p>还可以通过 <code class="language-plaintext highlighter-rouge">pop</code> 方法替代 <code class="language-plaintext highlighter-rouge">del</code> 关键字删除序列内某个元素：</p>

<p>In [24]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">l</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</code></pre></div></div>

<p>[1, 3, 4, 5]</p>

<p>通过 <code class="language-plaintext highlighter-rouge">insert</code> 方法在特定位置增加元素：</p>

<p>In [25]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 第一个参数是位置，第二个参数是插入的元素
</span><span class="n">l</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</code></pre></div></div>

<p>[1, 1, 3, 4, 5]</p>

<p>在元组、字典、集合等数据结构中常用的方法总结如下：</p>

<ul>
  <li>列表
    <ul>
      <li><code class="language-plaintext highlighter-rouge">append(x)</code> 把元素 x 放在入列表尾部</li>
      <li><code class="language-plaintext highlighter-rouge">count(x)</code> 统计元素 x 在列表中出现次数</li>
      <li><code class="language-plaintext highlighter-rouge">extent(seq)</code> 把新列表 seq 合并到列表尾部</li>
      <li><code class="language-plaintext highlighter-rouge">index(x)</code> 返回元素 x 在列表第一次出现的位置</li>
      <li><code class="language-plaintext highlighter-rouge">insert(index, x)</code> 把元素 x 插入到 index 位置</li>
      <li><code class="language-plaintext highlighter-rouge">pop(index)</code> 删除并返回 index 所在位置的元素</li>
      <li><code class="language-plaintext highlighter-rouge">remove(x)</code> 删除出现的第一个 x 元素</li>
      <li><code class="language-plaintext highlighter-rouge">reverse()</code> 颠倒列表顺序</li>
      <li><code class="language-plaintext highlighter-rouge">sort()</code> 对列表进行排序</li>
    </ul>
  </li>
  <li>字典
    <ul>
      <li><code class="language-plaintext highlighter-rouge">clear()</code> 清空字典内所有元素</li>
      <li><code class="language-plaintext highlighter-rouge">copy()</code> 返回字典的一个复制</li>
      <li><code class="language-plaintext highlighter-rouge">has_key(key)</code> 检查 key 是否在字典中</li>
      <li><code class="language-plaintext highlighter-rouge">items()</code> 返回一个含由 (key, value) 格式元组构成的列表</li>
      <li><code class="language-plaintext highlighter-rouge">keys()</code> 返回由键构成列表</li>
      <li><code class="language-plaintext highlighter-rouge">values()</code> 返回由值构成的列表</li>
      <li><code class="language-plaintext highlighter-rouge">setdefault(key, default)</code> 为键 key 添加默认值 default</li>
      <li><code class="language-plaintext highlighter-rouge">pop(key)</code> 删除 key 并返回对应的值</li>
    </ul>
  </li>
  <li>集合
    <ul>
      <li><code class="language-plaintext highlighter-rouge">add(x)</code> 向集合中添加元素 x</li>
      <li><code class="language-plaintext highlighter-rouge">clear()</code> 清空集合</li>
      <li><code class="language-plaintext highlighter-rouge">copy()</code> 返回集合的一个复制</li>
      <li><code class="language-plaintext highlighter-rouge">difference(set)</code> 返回集合与另一个集合的差集</li>
      <li><code class="language-plaintext highlighter-rouge">discard(x)</code> 删除元素 x</li>
      <li><code class="language-plaintext highlighter-rouge">isdisjoint(set)</code> 判断两个集合是否有交集</li>
      <li><code class="language-plaintext highlighter-rouge">issubset(set)</code> 判断新集合 set 是否是集合的子集</li>
      <li><code class="language-plaintext highlighter-rouge">issuperset()</code> 判断新集合 set 是否是集合的超集</li>
    </ul>
  </li>
</ul>

<h4 id="重识程序">重识程序</h4>

<p><code class="language-plaintext highlighter-rouge">__name__</code> 就是Python 程序的一个变量，可以直接调用。</p>

<p>In [26]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__name__</span>
</code></pre></div></div>

<p>‘<strong>main</strong>’</p>

<h2 id="python文件与模块">python文件与模块</h2>

<h3 id="文件">文件</h3>

<p>Python <code class="language-plaintext highlighter-rouge">open( )</code> 函数用于打开一个文件，并返回文件对象，在对文件进行处理过程都需要使用到这个函数。</p>

<h4 id="open函数">open函数</h4>

<p>为了测试 python 中的文件操作，我们先通过命令行在当前目录保存一个内容为 “hello world!” 的 test.txt 文件。</p>

<p><code class="language-plaintext highlighter-rouge">open(file, mode)</code> 函数主要有 file 和 mode 两个参数，其中 file 为需要读写文件的路径。mode 为读取文件时的模式，常用的模式有以下几个：</p>

<ul>
  <li>r：以字符串的形式读取文件。</li>
  <li>rb：以二进制的形式读取文件。</li>
  <li>w：写入文件。</li>
  <li>a：追加写入文件。</li>
</ul>

<p>不同模式下返回的文件对象功能也会不同。</p>

<p>In [1]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'test.txt'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="nb">file</span><span class="p">))</span>
</code></pre></div></div>

<p>&lt;class ‘_io.TextIOWrapper’&gt;</p>

<h4 id="文件对象">文件对象</h4>

<p><code class="language-plaintext highlighter-rouge">open</code> 函数会返回一个 文件对象。</p>

<p>文件对象提供的常用的方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">close( )</code>: 关闭文件</li>
  <li>在 r 与 rb 模式下：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">read()</code>: 读取整个文件</li>
      <li><code class="language-plaintext highlighter-rouge">readline()</code>: 读取文件的一行</li>
      <li><code class="language-plaintext highlighter-rouge">reallines()</code>: 读取文件的所有行</li>
    </ul>
  </li>
  <li>在 w 与 a 模式下：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">write()</code>:</li>
      <li><code class="language-plaintext highlighter-rouge">weitelines()</code>:</li>
    </ul>
  </li>
</ul>

<p>In [2]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 通过 read 方法读取整个文件
</span><span class="n">content</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</code></pre></div></div>

<p>Hello world!</p>

<p>In [3]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 通过 readline() 读取文件的一行
</span><span class="n">content</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</code></pre></div></div>

<p>什么也没输出</p>

<p>可以理解 open 函数返回的是一个指针，类似于在 Microsolf Word 文档里编辑文档时闪烁的光标。在执行过 <code class="language-plaintext highlighter-rouge">file.read( )</code> 操作后，由于读取了整个文件，这个指针已经来到了文件末尾，因此 <code class="language-plaintext highlighter-rouge">file.readline( )</code> 没有获取到文件的内容。这种情况我们可以通过 close 方法关闭文件后再重新打开。</p>

<p>In [4]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 关闭之前打开的 test.txt 文件
</span><span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
<span class="c1">## 重新打开
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'test.txt'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
<span class="n">content</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</code></pre></div></div>

<p>Hello world!</p>

<p>因此在操作文件时，我们一定要注意每次操作结束后，及时通过 <code class="language-plaintext highlighter-rouge">close( )</code> 方法关闭文件。</p>

<p>In [5]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 以 w 模式打开文件test.txt
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'test.txt'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span>
<span class="c1">## 创建需要写入的字符串变量 在字符串中 \n 代表换行（也就是回车）
</span><span class="n">content</span> <span class="o">=</span> <span class="s">'Hello world!</span><span class="se">\n</span><span class="s">Hello Python!!</span><span class="se">\n</span><span class="s">'</span>
<span class="c1">## 写入到 test.txt 文件中
</span><span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
<span class="c1">## 关闭文件对象
</span><span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="https://s2.loli.net/2022/01/10/YOnWLSIlcZgsvfa.png" alt="image-20220110101318204" /></p>

<p>需要注意在上述操作中，w 模式会覆盖之前的文件。如果你想在文件后面追加内容，可以使用 a 模式操作。</p>

<p>In [6]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 以 a 模式打开文件test.txt
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'test.txt'</span><span class="p">,</span> <span class="s">'a'</span><span class="p">)</span>
<span class="c1">## 创建需要追加的字符串变量
</span><span class="n">content</span> <span class="o">=</span> <span class="s">'Hello smart way!!!'</span>
<span class="c1">## 写入到 test.txt 文件中
</span><span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
<span class="c1">## 关闭文件对象
</span><span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="https://s2.loli.net/2022/01/10/pUW1EhmkG6TNg8z.png" alt="image-20220110101422427" /></p>

<h3 id="模块">模块</h3>

<p>模块可以帮助我们把一个代码添加到另一个代码中，真正实现了工具等复用性。编写模块的方式有很多，其中最简单的模块就是创建一个包含很多函数、变量以及类并以 .py 为后缀的文件</p>

<p><img src="https://s2.loli.net/2022/01/10/1Do9FUl3G7MIvJk.png" alt="image-20220110163135483" /></p>

<p>使用 <code class="language-plaintext highlighter-rouge">import</code> 关键字可以把一个模块引入到一个程序来使用它的功能。一个程序也可以是一个对象，这时 student.py 程序就成了一个对象，而里面的 student 类便成了它的对象变量。</p>

<p>In [7]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">student</span>
</code></pre></div></div>

<p>In [8]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xiaohu</span> <span class="o">=</span> <span class="n">student</span><span class="p">.</span><span class="n">student</span><span class="p">(</span><span class="s">'XiaoHu'</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">55</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">xiaohu</span><span class="p">)</span>
</code></pre></div></div>

<p>(‘XiaoHu’, 65, 55)</p>

<p>通过 student.py 这个模块，我们不需要重复编写就可以在任何程序中使用 student 类。</p>

<p>当我们只需要模块中的几个函数或类时，也可以采用 <code class="language-plaintext highlighter-rouge">from model_name import xxx</code> 的写法导入指定部分：</p>

<p>In [9]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## 仅导入 student 类
</span><span class="kn">from</span> <span class="nn">student</span> <span class="kn">import</span> <span class="n">student</span>
<span class="c1">## 这时直接通过类名，不需要使用模块名
</span><span class="n">xiaohu</span> <span class="o">=</span> <span class="n">student</span><span class="p">(</span><span class="s">'XiaoHu'</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">55</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">xiaohu</span><span class="p">)</span>
</code></pre></div></div>

<p>(‘XiaoHu’, 65, 55)</p>

<p>在 Python 中内置了很多标准模块，例如用于数学操作的 math 模块与处理时间的 time 模块：</p>

<p>In [10]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">math</span>
<span class="c1">## 通过 math.log 计算数值的对数
</span><span class="k">print</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">xiaohu</span><span class="p">.</span><span class="n">math_score</span><span class="p">))</span>
</code></pre></div></div>

<p>4.174387269895637</p>

<p>In [11]:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">time</span>
<span class="c1">## 通过 time 库中多个方法获取当前时间
## time.time 获取当前时间的 unix 时间戳
## time.loacltime 把当前时间的 unix 时间戳按照时区划分
## time.asctime 把按时区划分的时间戳转化成标准日期格式
</span><span class="k">print</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">asctime</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">localtime</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">())))</span>
</code></pre></div></div>

<p>Mon Jan 10 16:33:36 2022</p>]]></content><author><name>cute-rui</name></author><category term="python" /><category term="python基础" /><summary type="html"><![CDATA[python基础]]></summary></entry><entry><title type="html">jupyter</title><link href="https://eunicehr.github.io//ruirui-daydayup/python/2022/01/07/Jupyter-notebook%E5%85%A5%E9%97%A8.html" rel="alternate" type="text/html" title="jupyter" /><published>2022-01-07T00:00:00+00:00</published><updated>2022-01-07T00:00:00+00:00</updated><id>https://eunicehr.github.io//ruirui-daydayup/python/2022/01/07/Jupyter%20notebook%E5%85%A5%E9%97%A8</id><content type="html" xml:base="https://eunicehr.github.io//ruirui-daydayup/python/2022/01/07/Jupyter-notebook%E5%85%A5%E9%97%A8.html"><![CDATA[<h1 id="jupyter-notebook入门">Jupyter notebook入门</h1>

<h2 id="创建新笔记">创建新笔记</h2>

<ol>
  <li>
    <p>打开vscode，使用快捷键<code class="language-plaintext highlighter-rouge">ctrl+shift+P</code>，打开选项栏,输入jupyter,选择打开新的notebook</p>

    <p><img src="https://s2.loli.net/2022/01/06/DbMtr2B5Y4g3Nhv.png" alt="image-20220106234750742" /></p>

    <p><img src="C:/Users/lenovo/AppData/Roaming/Typora/typora-user-images/image-20220107005936487.png" alt="image-20220107005936487" /></p>
  </li>
  <li>
    <p>选择需要的python</p>

    <p><img src="https://s2.loli.net/2022/01/07/V7nIZk5tMJTxDEi.png" alt="4ca62326a276c6a476dacf60697adeb" /><img src="https://s2.loli.net/2022/01/07/8wFR7QghszTJXNP.png" alt="f0e647f5dba776923089316f13c258a" /></p>

    <blockquote>
      <ol>
        <li>jupyter 可以运行多种语言，是一种及编程和写作于一身的强大的编辑工具</li>
        <li>Jupyter notebook是基于Ipython内核的，在浏览器中以网页形式运行Python代码的工具，十分方便</li>
        <li>ipython是一个更高级的python解释器</li>
      </ol>
    </blockquote>
  </li>
</ol>

<h2 id="单元格蓝绿两模式命令模式编辑模式">单元格蓝绿两模式：命令模式、编辑模式</h2>

<p>Jupyter notebook中，代码和文档都存在于一个个单元格中，每个单元格都有蓝色和绿色两种模式。绿色框（编辑模式）和蓝色框（命令模式）</p>

<ul>
  <li>
    <p>命令模式（蓝色）</p>

    <p>可以执行键盘输入的快捷命令，如新增单元格、剪切、复制等。 <code class="language-plaintext highlighter-rouge">Esc</code> 可以从编辑模式退回到命令模式，此时单元左侧显示蓝色竖线。在命令模式下按X剪切，按C复制单元格，按Z恢复，shift+v粘贴单元格到上方，V粘贴到当前。</p>
  </li>
  <li>
    <p>编辑模式（绿色）</p>

    <p>可以编辑文本和代码。选中单元并按 <code class="language-plaintext highlighter-rouge">Enter</code> 键进入编辑模式，此时单元左侧显示绿色竖线。</p>
  </li>
</ul>

<h2 id="两种单元格代码单元格和markdown单元格">两种单元格：代码单元格和Markdown单元格</h2>

<p>Jupyter notebook中，有两种单元格：代码单元格和Markdown单元格。</p>

<ul>
  <li>
    <p>代码单元格</p>

    <p><img src="https://s2.loli.net/2022/01/07/hYxInmLyfNUaS4J.png" alt="image-20220107012348082" /></p>
  </li>
</ul>

<p>可以编写代码，按 <code class="language-plaintext highlighter-rouge">Shift + Enter</code> 运行代码，其结果显示在本单元下方。代码单元左边有 <code class="language-plaintext highlighter-rouge">In [1]:</code> 这样的序列标记，方便人们查看代码的执行次序。在蓝色命令模式下，按<code class="language-plaintext highlighter-rouge">y</code>键可以将Markdown单元格转换为代码单元格。</p>

<ul>
  <li></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  print ("hello world")
</code></pre></div></div>

<p>enter+shift运行代码，输出结果</p>

<p><img src="https://s2.loli.net/2022/01/07/ivFdPf7QJU5GbTh.png" alt="image-20220107213838826" /></p>

<ul>
  <li>
    <p>Markdown 单元格</p>

    <p><img src="https://s2.loli.net/2022/01/07/h18JN4Ynsf79H2m.png" alt="image-20220107012254454" />可以对文本进行编辑、设置文本格式、插入链接、图片和数学公式等。按<code class="language-plaintext highlighter-rouge">Shift + Enter</code> 运行 markdown ，其结果显示在本单元下方。在蓝色命令模式下按<code class="language-plaintext highlighter-rouge">m</code>键可以将代码单元格转换为Markdown单元格。</p>

    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># 我是Markdown一号标题</span>
<span class="gu">## 我是Markdown二号标题</span>
<span class="gu">### 我是Markdown三号标题</span>
<span class="gt">&gt;我是引用，我这行开头有一个灰色竖杠</span>
  
<span class="p">[</span><span class="nv">我是外部链接，点我上百度</span><span class="p">](</span><span class="sx">www.baidu.com</span><span class="p">)</span>
<span class="p">![</span><span class="nv">我是图片</span><span class="p">](</span><span class="sx">https://i1.hdslb.com/bfs/face/c59e147cd3b1f6a7bb88690933499354a024b280.jpg@68w_68h.webp</span><span class="p">)</span>
</code></pre></div>    </div>

    <p><img src="https://s2.loli.net/2022/01/07/kD3HoCqMZxWY4mT.png" alt="image-20220107081148362" /></p>
  </li>
</ul>

<h2 id="在markdown中插入数学公式">在Markdown中插入数学公式</h2>

<ul>
  <li></li>
</ul>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>这是爱因斯坦的质能转换方程$E=mc^2$，揭示了质量和能量之间的关系
</code></pre></div></div>

<p><img src="https://s2.loli.net/2022/01/07/AVLdUt4cRJKqFaM.png" alt="image-20220107081707507" /></p>

<p><img src="https://s2.loli.net/2022/01/07/EWKgqwsiBhml4rA.png" alt="image-20220107081930500" /></p>

<ul>
  <li></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>这是一元二次方程求解公式
$$x = \frac{-b\pm \sqrt{b^2-4ac}}{2a}$$
初中数学内容
</code></pre></div></div>

<p><img src="https://s2.loli.net/2022/01/07/quKAIGkD69Hp7lP.png" alt="image-20220107081846667" /></p>

<h2 id="常用快捷键">常用快捷键</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: left">快捷键</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">h</td>
      <td>查看所有快捷键</td>
    </tr>
    <tr>
      <td style="text-align: left">Enter</td>
      <td>从命令模式进入编辑模式</td>
    </tr>
    <tr>
      <td style="text-align: left">Esc</td>
      <td>从编辑模式退回到命令模式</td>
    </tr>
    <tr>
      <td style="text-align: left">m</td>
      <td>将代码单元格转换为Markdown单元格</td>
    </tr>
    <tr>
      <td style="text-align: left">y</td>
      <td>将Markdown单元格转换为代码单元格</td>
    </tr>
    <tr>
      <td style="text-align: left">shift+Enter</td>
      <td>运行本单元格，选择下面的代码块</td>
    </tr>
    <tr>
      <td style="text-align: left">ctrl+Enter</td>
      <td>运行本单元格</td>
    </tr>
    <tr>
      <td style="text-align: left">alt+Enter</td>
      <td>运行本单元格，在下方新建一个单元格</td>
    </tr>
    <tr>
      <td style="text-align: left">a</td>
      <td>在上方新建一个单元格（above）</td>
    </tr>
    <tr>
      <td style="text-align: left">b</td>
      <td>在下方新建一个单元格（below）</td>
    </tr>
    <tr>
      <td style="text-align: left">d</td>
      <td>删除选中的单元格（delete）</td>
    </tr>
    <tr>
      <td style="text-align: left">x</td>
      <td>剪切本单元格</td>
    </tr>
    <tr>
      <td style="text-align: left">c</td>
      <td>复制本单元格</td>
    </tr>
    <tr>
      <td style="text-align: left">shift v</td>
      <td>粘贴到上面</td>
    </tr>
    <tr>
      <td style="text-align: left">v</td>
      <td>粘贴到下面</td>
    </tr>
    <tr>
      <td style="text-align: left">l</td>
      <td>显示代码行号</td>
    </tr>
  </tbody>
</table>

<h2 id="所有快捷键">所有快捷键</h2>

<ul>
  <li>
    <p>h 查看所有快捷键</p>

    <blockquote>
      <p>这些快捷键和vscode 的jupyter的快捷键有些不一样</p>
    </blockquote>

    <p><img src="https://s2.loli.net/2022/01/07/cifXIbDNk89HjOB.png" alt="image-20220107005030666" /></p>
  </li>
</ul>

<p><img src="https://s2.loli.net/2022/01/07/mQpDjbG1isYflon.png" alt="image-20220107005146571" /></p>]]></content><author><name>cute-rui</name></author><category term="python" /><category term="工具" /><summary type="html"><![CDATA[Jupyter notebook入门]]></summary></entry><entry><title type="html">theme</title><link href="https://eunicehr.github.io//ruirui-daydayup/blog/2022/01/05/%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95.html" rel="alternate" type="text/html" title="theme" /><published>2022-01-05T00:00:00+00:00</published><updated>2022-01-05T00:00:00+00:00</updated><id>https://eunicehr.github.io//ruirui-daydayup/blog/2022/01/05/%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95</id><content type="html" xml:base="https://eunicehr.github.io//ruirui-daydayup/blog/2022/01/05/%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95.html"><![CDATA[<h1 id="一级标题">一级标题</h1>

<h2 id="二级标题">二级标题</h2>

<p><strong>加粗</strong>、<em>倾斜</em>、<u>下划线</u>、<del>删除线</del>、==高亮==、上标^上标^、下标~下标~、<a href="链接">链接</a>、[链接][链接]、<code class="language-plaintext highlighter-rouge">代码</code>、脚注 <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p>臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</p>

<p><strong>ある日</strong>、<em>おじいさん</em>は<u>山</u>へ<code class="language-plaintext highlighter-rouge">柴刈り</code>に、<del>おばあさん</del>は川へ洗濯に出かけました。すると川の上の方から、大きな桃が流れて来ました。おばあさんは喜んでその桃を拾い上げると、家に持ち帰りました。そしておじいさんが帰ると二人で桃を切って食べようとしました。すると桃の中から小さな男の子が飛び出してきました。</p>

<p><strong>Lorem</strong> <u>ipsum</u> <del>dolor</del> ==sit amet==, consectetur^sed^ adipiscing~sed~ elit <a href="tempor incididunt">do eiusmod</a> <code class="language-plaintext highlighter-rouge">ut labore</code> et dolore magna aliqua.</p>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>

<blockquote>
  <h6 id="标题六">标题六</h6>

  <p><strong>加粗</strong>、<em>倾斜</em>、<u>下划线</u>、<del>删除线</del>、==高亮==、上标^上标^、下标~下标~、<a href="链接">链接</a>、[链接][链接]、<code class="language-plaintext highlighter-rouge">代码</code>、脚注 <sup id="fnref:1:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

  <blockquote>
    <p>臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。</p>

    <blockquote>
      <p><em>ある日、おじいさんは山へ柴刈りに、おばあさんは川へ洗濯に出かけました</em>。</p>
    </blockquote>
  </blockquote>

  <h5 id="标题五">标题五</h5>

  <p><strong>Lorem</strong> <u>ipsum</u> <del>dolor</del> ==sit amet==, consectetur^sed^ adipiscing~sed~ elit <a href="tempor incididunt">do eiusmod</a> <code class="language-plaintext highlighter-rouge">ut labore</code> et dolore magna &amp; aliqua.</p>

  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
</blockquote>

<h3 id="三级标题">三级标题</h3>

<h4 id="四级标题">四级标题</h4>

<h5 id="五级标题">五级标题</h5>

<h6 id="六级标题">六级标题</h6>

<p><img src="https://i.loli.net/2021/04/17/2Q7tpYqLWledUJC.png" /></p>

<p>块元素：</p>

<ul>
  <li>无序列表</li>
  <li>充分等等
    <ul>
      <li>无序列表的递进</li>
      <li>仍然会好久哦经济
        <ol>
          <li>无序列表下的有序列表</li>
          <li>日日日动词
            <ol>
              <li>有序列表下的递进</li>
              <li>顶顶顶方法
                <ul class="task-list">
                  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />待办事项</li>
                  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />待办事项</li>
                </ul>
              </li>
            </ol>
          </li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<blockquote>
  <blockquote>
    <p>臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。</p>

    <blockquote>
      <p><em>ある日、おじいさんは山へ柴刈りに、おばあさんは川へ洗濯に出かけました</em>。</p>
    </blockquote>
  </blockquote>

  <ul class="task-list">
    <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />哈哈哈哈哈哈哈</li>
    <li class="task-list-item">
      <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><em>ももたろう</em></p>
    </li>
    <li class="task-list-item">无序列表</li>
    <li class="task-list-item">充分等等
      <ul>
        <li>无序列表的递进</li>
        <li>仍然会好久哦经济
          <ol>
            <li>无序列表下的有序列表</li>
            <li>日日日动词</li>
          </ol>
          <ol>
            <li>有序列表下的递进
              <ol>
                <li>顶顶顶方法</li>
              </ol>
            </li>
          </ol>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
 <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;titile&gt;</span>this is a html file<span class="nt">&lt;/titile&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"head title"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;p&gt;</span>
                <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"para highlight"</span><span class="nt">&gt;</span>highlight paragraph<span class="nt">&lt;/span&gt;</span>
            <span class="nt">&lt;/p&gt;</span>
            <span class="nt">&lt;img</span> <span class="na">alt=</span><span class="s">"content"</span> <span class="na">width=</span><span class="s">"520px"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<hr />

<p>&lt;hr width=50%&gt;</p>

<p>&lt;hr width=30%&gt;</p>

<center>居中文字</center>

<p>其他内容：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">左对齐</th>
      <th style="text-align: right">右对齐</th>
      <th style="text-align: center">居中对齐</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">单元格</td>
      <td style="text-align: right">单元格</td>
      <td style="text-align: center">单元格</td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: right"> </td>
      <td style="text-align: center"> </td>
    </tr>
  </tbody>
</table>

<p>** 正常显示星号 **</p>

<pre><code class="language-mermaid">graph LR
A[方形] --&gt;B(圆角)
    B --&gt; C{条件 a}
    C --&gt;|a=1| D[结果 1]
    C --&gt;|a=2| E[结果 2]
    F[横向流程图]
</code></pre>

<pre><code class="language-mermaid">graph TD
A[方形] --&gt; B(圆角)
B --&gt; C{条件 a}
C --&gt; |a=1| D[结果 1]
C --&gt; |a=2| E[结果 2]
F[竖向流程图]
</code></pre>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

# 一级标题

## 二级标题

**加粗**、*倾斜*、&lt;u&gt;下划线&lt;/u&gt;、~~删除线~~、==高亮==、上标^上标^、下标~下标~、[链接](链接)、[链接][链接]、`代码`、脚注 [^1]

臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。

**ある日**、*おじいさん*は&lt;u&gt;山&lt;/u&gt;へ`柴刈り`に、~~おばあさん~~は川へ洗濯に出かけました。すると川の上の方から、大きな桃が流れて来ました。おばあさんは喜んでその桃を拾い上げると、家に持ち帰りました。そしておじいさんが帰ると二人で桃を切って食べようとしました。すると桃の中から小さな男の子が飛び出してきました。

**Lorem** &lt;u&gt;ipsum&lt;/u&gt; ~~dolor~~ ==sit amet==, consectetur^sed^ adipiscing~sed~ elit [do eiusmod](tempor incididunt) `ut labore` et dolore magna aliqua.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.

&gt; ###### 标题六
&gt;
&gt; **加粗**、*倾斜*、&lt;u&gt;下划线&lt;/u&gt;、~~删除线~~、==高亮==、上标^上标^、下标~下标~、[链接](链接)、[链接][链接]、`代码`、脚注 [^1]
&gt;
&gt; &gt; 臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。
&gt; &gt;
&gt; &gt; &gt; *ある日、おじいさんは山へ柴刈りに、おばあさんは川へ洗濯に出かけました*。
&gt;
&gt; ##### 标题五
&gt;
&gt; **Lorem** &lt;u&gt;ipsum&lt;/u&gt; ~~dolor~~ ==sit amet==, consectetur^sed^ adipiscing~sed~ elit [do eiusmod](tempor incididunt) `ut labore` et dolore magna &amp; aliqua.
&gt;
&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.

### 三级标题

#### 四级标题

##### 五级标题

###### 六级标题

&lt;img src="https://i.loli.net/2021/04/17/2Q7tpYqLWledUJC.png" &gt;

块元素：

+ 无序列表
+ 充分等等
  + 无序列表的递进
  + 仍然会好久哦经济
    1. 无序列表下的有序列表
    2. 日日日动词
       1. 有序列表下的递进
       2. 顶顶顶方法
          + [ ] 待办事项
          + [x] 待办事项

&gt; &gt; 臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。
&gt; &gt;
&gt; &gt; &gt; *ある日、おじいさんは山へ柴刈りに、おばあさんは川へ洗濯に出かけました*。
&gt;
&gt; + [ ] 哈哈哈哈哈哈哈
&gt;
&gt; + [x] *ももたろう*
&gt;
&gt; + 无序列表
&gt;
&gt; + 充分等等
&gt;
&gt;   + 无序列表的递进
&gt;   + 仍然会好久哦经济
&gt;
&gt;    1. 无序列表下的有序列表
&gt;    1. 日日日动词
&gt;       1. 有序列表下的递进
&gt;          1. 顶顶顶方法

```html
&lt;html&gt;
 &lt;head&gt;
        &lt;titile&gt;this is a html file&lt;/titile&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="head title"&gt;
            &lt;p&gt;
                &lt;span class="para highlight"&gt;highlight paragraph&lt;/span&gt;
            &lt;/p&gt;
            &lt;img alt="content" width="520px"&gt;
        &lt;/div&gt;
    &lt;/body&gt;
```

---

&lt;hr width=50%&gt;


&lt;hr width=30%&gt;


&lt;center&gt;居中文字&lt;/center&gt;

其他内容：

| 左对齐 | 右对齐 | 居中对齐 |
| :----- | -----: | :------: |
| 单元格 | 单元格 |  单元格  |
|        |        |          |

\*\* 正常显示星号 \*\*

```mermaid
graph LR
A[方形] --&gt;B(圆角)
    B --&gt; C{条件 a}
    C --&gt;|a=1| D[结果 1]
    C --&gt;|a=2| E[结果 2]
    F[横向流程图]
```

```mermaid
graph TD
A[方形] --&gt; B(圆角)
B --&gt; C{条件 a}
C --&gt; |a=1| D[结果 1]
C --&gt; |a=2| E[结果 2]
F[竖向流程图]
```

[^1]: 脚注。Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
</code></pre></div></div>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>脚注。Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:1:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
  </ol>
</div>]]></content><author><name>cute-rui</name></author><category term="blog" /><category term="markdown" /><summary type="html"><![CDATA[一级标题]]></summary></entry><entry><title type="html">github-pages</title><link href="https://eunicehr.github.io//ruirui-daydayup/blog/2022/01/05/github-pages.html" rel="alternate" type="text/html" title="github-pages" /><published>2022-01-05T00:00:00+00:00</published><updated>2022-01-05T00:00:00+00:00</updated><id>https://eunicehr.github.io//ruirui-daydayup/blog/2022/01/05/github-pages</id><content type="html" xml:base="https://eunicehr.github.io//ruirui-daydayup/blog/2022/01/05/github-pages.html"><![CDATA[<h2 id="typora">typora</h2>

<h3 id="typora设置">typora设置</h3>

<p><img src="https://s2.loli.net/2022/01/05/EAHDziuSRlwcsn7.png" alt="image-20220105113113077" /></p>

<h3 id="typora图床">typora图床</h3>

<h4 id="smms">smms</h4>

<ul>
  <li>
    <p>注册smms</p>
  </li>
  <li>
    <p>登录</p>
  </li>
  <li>
    <p><img src="https://s2.loli.net/2022/01/05/DOyz2hScJMnrZfK.png" alt="image-20220105135256640" /></p>
  </li>
  <li>
    <p><img src="https://s2.loli.net/2022/01/05/YmEONs1Ut7crpdu.png" alt="image-20220105135359241" /></p>
  </li>
  <li>
    <p>生成token，复制,待会的picgo插件配置需要</p>

    <p><img src="https://s2.loli.net/2022/01/05/aURO4WTuErlX87e.png" alt="image-20220105135507307" /></p>
  </li>
</ul>

<h4 id="picgo">picgo</h4>

<ul>
  <li>选择picgo，点击下载或更新</li>
</ul>

<p><img src="https://s2.loli.net/2022/01/05/xdpeEmtXBQOCZc3.png" alt="image-20220105143617116" /></p>

<ul>
  <li>
    <p>安装插件</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>C:<span class="se">\U</span>sers<span class="se">\l</span>enovo<span class="se">\A</span>ppData<span class="se">\R</span>oaming<span class="se">\T</span>ypora<span class="se">\p</span>icgo<span class="se">\w</span>in64<span class="se">\</span>
.<span class="se">\p</span>icgo.exe <span class="nb">install </span>smms-user
</code></pre></div>    </div>
  </li>
  <li>
    <p>配置picgo</p>
  </li>
</ul>

<p>打开PicGo-Core的配置文件</p>

<p><img src="https://s2.loli.net/2022/01/05/UVnA63jtzxfQb9S.png" alt="image-20220105122559216" /></p>

<p>按照下面的格式进行替换，Authorization中填写之前复制的token</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "picBed": {
    "current": "smms-user",
    "uploader": "smms-user",
    "smms-user": {
      "Authorization": "uuwjMOtZGgRRu6pyUxRCcNTjHdGOAQqK"
    },
    "transformer": "path"
  },
  "picgoPlugins": {
    "picgo-plugin-smms-user": true
  }
}
</code></pre></div></div>

<h4 id="nodejs">node.js</h4>

<ul>
  <li>复制此路径</li>
</ul>

<p><img src="https://s2.loli.net/2022/01/05/pCMz147cJhFak3U.png" alt="image-20220105134156657" /></p>

<ul>
  <li>添加新的环境变量</li>
</ul>

<p><img src="https://s2.loli.net/2022/01/05/q2KyTpkA1joGzV3.png" alt="image-20220105133154657" /></p>

<h1 id="github">github</h1>

<h2 id="项目fork">项目fork</h2>

<ul>
  <li>
    <p>选主题</p>

    <p>在http://jekyllthemes.org/中选定主题http://jekyllthemes.org/themes/jekyll-theme-yat/。选这一个主题，并进入fork</p>
  </li>
  <li>
    <p>fork</p>

    <p><img src="https://s2.loli.net/2022/01/05/SRxqJirFwhomOvI.png" alt="image-20220105195157949" /></p>

    <p>fork完之后，项目已经复制到了gitbub仓库里</p>

    <p><img src="https://s2.loli.net/2022/01/05/djVLZw3qko7HKNp.png" alt="image-20220105194815692" /></p>
  </li>
  <li>
    <p>修改项目名</p>
  </li>
</ul>

<p><img src="https://s2.loli.net/2022/01/05/zcUx6GbtIwYHi3C.png" alt="image-20220105101423915" /></p>

<ul>
  <li>修改Branch</li>
</ul>

<p><img src="https://s2.loli.net/2022/01/05/X6u5o21g7zGEPnM.png" alt="image-20220105193129496" /></p>

<h3 id="git下载与配置">git下载与配置</h3>

<p>1.git下载</p>

<ul>
  <li>下载</li>
</ul>

<p><img src="https://s2.loli.net/2022/01/05/SLwAjoqfCg6adxk.png" alt="image-20220105103623063" /></p>

<p><img src="https://s2.loli.net/2022/01/05/wgcZER6HMDhJsNf.png" alt="image-20220105103725326" /></p>

<p>自己电脑多少位选多少位</p>

<p><img src="https://s2.loli.net/2022/01/05/WB3HqO9kMANTl2J.png" alt="image-20220105103812200" /></p>

<ul>
  <li>安装：点击下载好的安装包安装软件，一直点击next并且将能选上的都选上，直至出现install，点击install。</li>
</ul>

<p>​                   安装好后鼠标右键,会多出Git GUI Here 和 Git Bash Here 两个选项</p>

<p><img src="https://s2.loli.net/2022/01/05/G5hsk9TF6VSwZ48.png" alt="image-20220105104458614" /></p>

<ol>
  <li>
    <p>git配置</p>

    <ul>
      <li>复制</li>
    </ul>

    <p><img src="https://s2.loli.net/2022/01/05/oYxQRfMrAu4pFyE.png" alt="image-20220105105402530" /></p>

    <ul>
      <li>右击get bash,输入git clone和之前复制的内容</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/Eunicehr/ruirui-daydayup.git
</code></pre></div>    </div>

    <ul>
      <li>将压缩包解压进桌面clone出的文件夹中</li>
    </ul>
  </li>
</ol>

<h3 id="git项目同步">git项目同步</h3>

<ul>
  <li>在文件夹中鼠标右键gitbash,输入三行代码</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add *
git commit -m "init"
git push origin master
</code></pre></div></div>

<h2 id="blog">Blog</h2>

<h3 id="blog设置">Blog设置</h3>

<ul>
  <li>根据注释修改文件夹中的config,记得保存</li>
</ul>

<h3 id="blog脚本">Blog脚本</h3>

<ul>
  <li>md.py</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sa">r</span><span class="s">'''
Author       : ruirui-daydayup
Date         : 2022-1-04 14:27:47
LastEditors  : ruirui-daydayup
LastEditTime : 2021-1-5 16:07:10
FilePath     : \DeepLabV3Plus-Pytorchd:\blog\md.py
'''</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">import</span> <span class="nn">argparse</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_args</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
    <span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"--name"</span><span class="p">,</span><span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">help</span><span class="o">=</span><span class="s">"文件名"</span><span class="p">)</span>
    <span class="n">args</span><span class="o">=</span><span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">args</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">args</span><span class="o">=</span><span class="n">get_args</span><span class="p">()</span>
    <span class="n">filename</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d'</span><span class="p">)</span><span class="o">+</span><span class="s">"-"</span><span class="o">+</span><span class="n">args</span><span class="p">.</span><span class="n">name</span><span class="o">+</span><span class="s">".md"</span>
    <span class="n">filename</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="s">'C:\Users\lenovo\Desktop</span><span class="se">\r</span><span class="s">uirui-daydayup\_posts'</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
    <span class="n">f</span> <span class="o">=</span>  <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">"w"</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span>
    <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span>
        <span class="sa">f</span><span class="s">"""---
layout: post
title: "</span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">"
date:   </span><span class="si">{</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d'</span><span class="p">)</span><span class="si">}</span><span class="s">
categories: [paper]
tags: []
pinned: false
toc: true
author: ruirui-daydayup
---

 &lt;!--more--&gt;
        """</span>
        <span class="p">)</span>
    <span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">'C:</span><span class="se">\\</span><span class="s">"Program Files"\Typora</span><span class="se">\\</span><span class="s">typora.exe {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
        <span class="n">filename</span><span class="p">))</span>


</code></pre></div></div>

<ul>
  <li>push.sh</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="k">*</span>
git commit <span class="nt">-m</span> <span class="s2">"init"</span>
git push origin master
</code></pre></div></div>

<ul>
  <li>md.sh</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span> <span class="n">md</span><span class="p">.</span><span class="n">py</span> <span class="o">--</span><span class="n">name</span> <span class="err">$</span><span class="mi">1</span>
</code></pre></div></div>

<ol>
  <li>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./md.sh 文件名
</code></pre></div>    </div>

    <p>在C:\Users\lenovo\Desktop\ruirui-daydayup中右键get bash，./md.sh+文件名在posts中创建新项目，修改分类和标签等</p>
  </li>
  <li>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./push.sh
</code></pre></div>    </div>

    <p>在C:\Users\lenovo\Desktop\ruirui-daydayup中右键get bash，. push.sh将新项目上传至blog</p>
  </li>
</ol>]]></content><author><name>cute-rui</name></author><category term="blog" /><category term="blog" /><summary type="html"><![CDATA[typora]]></summary></entry><entry><title type="html">python数据结构</title><link href="https://eunicehr.github.io//ruirui-daydayup/python/2022/01/05/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html" rel="alternate" type="text/html" title="python数据结构" /><published>2022-01-05T00:00:00+00:00</published><updated>2022-01-05T00:00:00+00:00</updated><id>https://eunicehr.github.io//ruirui-daydayup/python/2022/01/05/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84</id><content type="html" xml:base="https://eunicehr.github.io//ruirui-daydayup/python/2022/01/05/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    ```python
    t=[]
    t.append('hrui')
    
    ```
</code></pre></div></div>]]></content><author><name>cute-rui</name></author><category term="python" /><category term="python" /><summary type="html"><![CDATA[```python t=[] t.append('hrui') ```]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="https://eunicehr.github.io//ruirui-daydayup/jekyll/2018/12/07/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-12-07T00:00:00+00:00</published><updated>2018-12-07T00:00:00+00:00</updated><id>https://eunicehr.github.io//ruirui-daydayup/jekyll/2018/12/07/welcome-to-jekyll</id><content type="html" xml:base="https://eunicehr.github.io//ruirui-daydayup/jekyll/2018/12/07/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<h2 id="section-1">section 1</h2>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
<span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<h2 id="section-2">section 2</h2>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>

<p>$ a * b = c ^ b $</p>

<p>$ 2^{\frac{n-1}{3}} $</p>

<p>$ \int_a^b f(x)\,dx. $</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// prints 'Hi, Tom' to STDOUT.</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>

<span class="n">p1</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">"John"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">age</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Jeffrey</name></author><category term="jekyll" /><category term="jekyll" /><category term="theme" /><category term="yat" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">An exhibit of Markdown</title><link href="https://eunicehr.github.io//ruirui-daydayup/markdown/2018/12/05/an-exhibit-of-markdown.html" rel="alternate" type="text/html" title="An exhibit of Markdown" /><published>2018-12-05T00:00:00+00:00</published><updated>2018-12-05T00:00:00+00:00</updated><id>https://eunicehr.github.io//ruirui-daydayup/markdown/2018/12/05/an-exhibit-of-markdown</id><content type="html" xml:base="https://eunicehr.github.io//ruirui-daydayup/markdown/2018/12/05/an-exhibit-of-markdown.html"><![CDATA[<p>This note demonstrates some of what <a href="http://daringfireball.net/projects/markdown/">Markdown</a> is capable of doing.</p>

<h2 id="an-exhibit-of-markdown">An exhibit of Markdown</h2>

<p><em>Note: Feel free to play with this page. Unlike regular notes, this doesn’t automatically save itself.</em></p>

<h2 id="basic-formatting">Basic formatting</h2>

<p>Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.</p>

<p>Paragraphs must be separated by a blank line. Basic formatting of <em>italics</em> and <strong>bold</strong> is supported. This <em>can be <strong>nested</strong> like</em> so.</p>

<h2 id="lists">Lists</h2>

<h3 id="ordered-list">Ordered list</h3>

<ol>
  <li>Item 1</li>
  <li>A second item</li>
  <li>Number 3</li>
  <li>Ⅳ</li>
</ol>

<p><em>Note: the fourth item uses the Unicode character for <a href="http://www.fileformat.info/info/unicode/char/2163/index.htm">Roman numeral four</a>.</em></p>

<h3 id="unordered-list">Unordered list</h3>

<ul>
  <li>An item</li>
  <li>Another item</li>
  <li>Yet another item</li>
  <li>And there’s more…</li>
</ul>

<h2 id="paragraph-modifiers">Paragraph modifiers</h2>

<h3 id="code-block">Code block</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Code blocks are very useful for developers and other people who look at code or other things that are written in plain text. As you can see, it uses a fixed-width font.
</code></pre></div></div>

<p>You can also make <code class="language-plaintext highlighter-rouge">inline code</code> to add code into other things.</p>

<h3 id="quote">Quote</h3>

<blockquote>
  <p>Here is a quote. What this is should be self explanatory. Quotes are automatically indented when they are used.</p>
</blockquote>

<h2 id="headings">Headings</h2>

<p>There are six levels of headings. They correspond with the six levels of HTML headings. You’ve probably noticed them already in the page. Each level down uses one more hash character.</p>

<h3 id="headings-can-also-contain-formatting">Headings <em>can</em> also contain <strong>formatting</strong></h3>

<h3 id="they-can-even-contain-inline-code">They can even contain <code class="language-plaintext highlighter-rouge">inline code</code></h3>

<p>Of course, demonstrating what headings look like messes up the structure of the page.</p>

<p>I don’t recommend using more than three or four levels of headings here, because, when you’re smallest heading isn’t too small, and you’re largest heading isn’t too big, and you want each size up to look noticeably larger and more important, there there are only so many sizes that you can use.</p>

<h2 id="urls">URLs</h2>

<p>URLs can be made in a handful of ways:</p>

<ul>
  <li>A named link to <a href="http://www.markitdown.net/">MarkItDown</a>. The easiest way to do these is to select what you want to make a link and hit <code class="language-plaintext highlighter-rouge">Ctrl+L</code>.</li>
  <li>Another named link to <a href="http://www.markitdown.net/">MarkItDown</a></li>
  <li>Sometimes you just want a URL like <a href="http://www.markitdown.net/">http://www.markitdown.net/</a>.</li>
</ul>

<h2 id="horizontal-rule">Horizontal rule</h2>

<p>A horizontal rule is a line that goes across the middle of the page.</p>

<hr />

<p>It’s sometimes handy for breaking things up.</p>

<h2 id="images">Images</h2>

<p>Markdown can also contain images. I’ll need to add something here sometime.</p>

<h2 id="finally">Finally</h2>

<p>There’s actually a lot more to Markdown than this. See the official <a href="http://daringfireball.net/projects/markdown/basics">introduction</a> and <a href="http://daringfireball.net/projects/markdown/syntax">syntax</a> for more information. However, be aware that this is not using the official implementation, and this might work subtly differently in some of the little things.</p>]]></content><author><name>ruirui-daydayup</name></author><category term="markdown" /><category term="example" /><category term="markdown" /><summary type="html"><![CDATA[This note demonstrates some of what Markdown is capable of doing.]]></summary></entry><entry><title type="html">Mathjax Test</title><link href="https://eunicehr.github.io//ruirui-daydayup/markdown/2018/05/26/mathjax-test.html" rel="alternate" type="text/html" title="Mathjax Test" /><published>2018-05-26T00:00:00+00:00</published><updated>2018-05-26T00:00:00+00:00</updated><id>https://eunicehr.github.io//ruirui-daydayup/markdown/2018/05/26/mathjax-test</id><content type="html" xml:base="https://eunicehr.github.io//ruirui-daydayup/markdown/2018/05/26/mathjax-test.html"><![CDATA[<ul>
  <li>A safe integer is an integer that
    <ul>
      <li>can be exactly represented as an IEEE-754 double precision number, and</li>
      <li>whose IEEE-75 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation</li>
    </ul>
  </li>
  <li>For example, $ 2 ^ {53} - 1 $ is a safe integer,
    <ul>
      <li>it can be exactly represented</li>
    </ul>
  </li>
</ul>]]></content><author><name>ruirui-daydayup</name></author><category term="markdown" /><category term="test" /><summary type="html"><![CDATA[A safe integer is an integer that can be exactly represented as an IEEE-754 double precision number, and whose IEEE-75 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation For example, $ 2 ^ {53} - 1 $ is a safe integer, it can be exactly represented]]></summary></entry><entry><title type="html">Video example</title><link href="https://eunicehr.github.io//ruirui-daydayup/example/2017/12/18/video-example.html" rel="alternate" type="text/html" title="Video example" /><published>2017-12-18T00:00:00+00:00</published><updated>2017-12-18T00:00:00+00:00</updated><id>https://eunicehr.github.io//ruirui-daydayup/example/2017/12/18/video-example</id><content type="html" xml:base="https://eunicehr.github.io//ruirui-daydayup/example/2017/12/18/video-example.html"><![CDATA[<h2 id="canon-in-d-pachelbels-canon---cello--piano-best-wedding-version">Canon in D (Pachelbel’s Canon) - Cello &amp; Piano [BEST WEDDING VERSION]</h2>
<p>Some of you know that we occasionally play for weddings. As you can imagine, we get a LOT of requests for Canon in D, and we discovered that there were no good arrangements available anywhere for piano and cello! Hard to believe given its popularity. So we decided to make our own! We tried to stick as closely to the original as possible (which was written for three violins and basso continuo), and we performed it <em>not</em> at a snail’s pace so the bride can actually make it down the aisle without putting everyone to sleep. 🙊(Yeah, we said it! Nobody likes a slow processional!) Also, the number one complaint about this piece from cellists is always how booooring it is to play because they literally have to play the same 8 bass notes over and over for the entire piece. Problem solved with this arrangement because the cello never has to play the bass! 🙌(The piano does, but we get lots of other fun stuff too so it’s ok!) So for all you musicians out there playing weddings, we hope you enjoy playing this arrangement a little more than the ones you were used to…You can get it from www.musicnotes.com. 😊Be sure to let us know in the comments if you do!</p>

<p><img src="//www.youtube.com/watch?v=Ptk_1Dc2iPY" alt="" /></p>

<h2 id="gucci-hallucination--the-line-animation--gucci">GUCCI HALLUCINATION / THE LINE ANIMATION / GUCCI</h2>
<p>BACKGROUND /</p>

<p>Gucci share their creative vision through a series of surreal animated paintings by acclaimed artist Ignasi Monreal and The Line Animation studio. The animations make up part of a larger campaign shared via social media, above the line and print.</p>

<p>APPROACH /</p>

<p>Our aim was to ground and accentuate the outlandish scenarios with ambient sound design. Neither proclaiming to be positive or negative, the sound conveys a sense of the uncanny and leaves the audience with nothing but their own interpretations. their creative vision through a series of surreal animated paintings by acclaimed artist Ignasi Monreal and The Line Animation studio. The animations make up part of a larger campaign shared via social media, above the line and print.</p>

<p><img src="https://vimeo.com/263856289" alt="" /></p>

<h2 id="finneas-demos-how-he-builds-songs-for-billie-eilish">FINNEAS Demos How He Builds Songs For Billie Eilish</h2>
<p>Grammy Award-winning musician and producer FINNEAS sits down with Pitchfork and closely examines his creative process while working on some of the biggest hit songs of the past couple years. FINNEAS explores the sounds that brought upon 
some of his greatest musical breakthroughs in songs such as bad guy, bury a friend, ocean eyes, when the party’s over, I Lost a Friend, Used to This and much more.</p>

<p><img src="https://dai.ly/x7tgcev" alt="" /></p>

<h2 id="2019-bmw-vision-m-next-concept-hd">2019 BMW Vision M NEXT Concept (HD)</h2>

<p>In future, drivers will be able to choose whether they wish to be driven or do the driving themselves. With the BMW Vision M NEXT, the BMW Group is revealing its take on how driving pleasure might look in future. It offers a foretaste of the BMW M brand’s electrified future by placing the focus squarely on the actively engaged driver. Intelligent technologies provide comprehensive yet carefully targeted assistance to turn them into the ultimate driver.</p>

<p><img src="https://www.dailymotion.com/video/x7bur2y" alt="" /></p>

<h2 id="this-is-the-poster-image">This is the poster image</h2>
<p>In modern browsers, adding a video to your page is as easy as adding an image. No longer do you need to deal with special plug-ins or require crazy markup, you can do it with a single element.
<img src="//www.html5rocks.com/en/tutorials/video/basics/devstories.webm" alt="video" /></p>]]></content><author><name>ruirui-daydayup</name></author><category term="example" /><category term="video" /><summary type="html"><![CDATA[Canon in D (Pachelbel’s Canon) - Cello &amp; Piano [BEST WEDDING VERSION] Some of you know that we occasionally play for weddings. As you can imagine, we get a LOT of requests for Canon in D, and we discovered that there were no good arrangements available anywhere for piano and cello! Hard to believe given its popularity. So we decided to make our own! We tried to stick as closely to the original as possible (which was written for three violins and basso continuo), and we performed it not at a snail’s pace so the bride can actually make it down the aisle without putting everyone to sleep. 🙊(Yeah, we said it! Nobody likes a slow processional!) Also, the number one complaint about this piece from cellists is always how booooring it is to play because they literally have to play the same 8 bass notes over and over for the entire piece. Problem solved with this arrangement because the cello never has to play the bass! 🙌(The piano does, but we get lots of other fun stuff too so it’s ok!) So for all you musicians out there playing weddings, we hope you enjoy playing this arrangement a little more than the ones you were used to…You can get it from www.musicnotes.com. 😊Be sure to let us know in the comments if you do!]]></summary></entry></feed>